
#Область ПрограммныйИнтерфейс

Функция ОбработатьЗапрос(Запрос) Экспорт
	
	//
	КонтекстЗапроса = СформироватьДанныеКонтекстаЗапроса(Запрос);
	
	//
	ОпределитьОписаниеЗапроса(КонтекстЗапроса);
	
	Если КонтекстЗапроса.ОписаниеСервиса = Неопределено Тогда
		
		ТипОтвета = Перечисления.ТипыОтветовREST.ОшибкаНеНайдено;
		ОписаниеОшибки = "Сервис " + КонтекстЗапроса.КлючСервиса + " не найден";
		
		РезультатОбработчика = СформироватьРезультатОбработчика(ТипОтвета, ОписаниеОшибки);
		
		КонтекстОтвета = СформироватьДанныеКонтекстаОтвета(РезультатОбработчика, КонтекстЗапроса);
		
		Возврат СформироватьОтвет(КонтекстОтвета);
		
	КонецЕсли;
	
	Если КонтекстЗапроса.ОписаниеРесурса = Неопределено Тогда
		
		ТипОтвета = Перечисления.ТипыОтветовREST.ОшибкаНеНайдено;
		ОписаниеОшибки = "Ресурс " + КонтекстЗапроса.ВызываемыйРесурс + " не найден";
		
		РезультатОбработчика = СформироватьРезультатОбработчика(ТипОтвета, ОписаниеОшибки);
		
		КонтекстОтвета = СформироватьДанныеКонтекстаОтвета(РезультатОбработчика, КонтекстЗапроса);
		
		Возврат СформироватьОтвет(КонтекстОтвета);
		
	КонецЕсли;
	
	Если КонтекстЗапроса.ОписаниеМетода = Неопределено Тогда
		
		ТипОтвета = Перечисления.ТипыОтветовREST.ОшибкаМетодНеПоддерживается;
		ОписаниеОшибки = "Метод не поддерживается";
		
		РезультатОбработчика = СформироватьРезультатОбработчика(ТипОтвета, ОписаниеОшибки);
		
		КонтекстОтвета = СформироватьДанныеКонтекстаОтвета(РезультатОбработчика, КонтекстЗапроса);
		
		Возврат СформироватьОтвет(КонтекстОтвета);
		
	КонецЕсли;
	
	// Начать замер
	КонтекстЗамера = ЛогированиеREST.ИнициализироватьЗамер(КонтекстЗапроса);
	
	// Проверка авторизации
	Если Не АвторизацияПройдена(КонтекстЗапроса) Тогда
		
		ТипОтвета = Перечисления.ТипыОтветовREST.ОшибкаНеАвторизован;
		ОписаниеОшибки = "Ошибка авторизации";
		
		РезультатОбработчика = СформироватьРезультатОбработчика(ТипОтвета, ОписаниеОшибки);
		
		КонтекстОтвета = СформироватьДанныеКонтекстаОтвета(РезультатОбработчика, КонтекстЗапроса);
		
		ЛогированиеREST.ЗавершитьЗамер(КонтекстЗамера, КонтекстОтвета);
		
		Возврат СформироватьОтвет(КонтекстОтвета);
		
	КонецЕсли;
	
	// Проверка запроса по спецификации
	ОписаниеОшибокСпецификации = ПроверитьКонтекстЗапросаПоСпецификации(КонтекстЗапроса);
	
	Если ЗначениеЗаполнено(ОписаниеОшибокСпецификации) Тогда
		
		ТипОтвета = Перечисления.ТипыОтветовREST.ОшибкаСпецификации;
		
		РезультатОбработчика = СформироватьРезультатОбработчика(ТипОтвета, ОписаниеОшибокСпецификации);
		
		КонтекстОтвета = СформироватьДанныеКонтекстаОтвета(РезультатОбработчика, КонтекстЗапроса);
		
		ЛогированиеREST.ЗавершитьЗамер(КонтекстЗамера, КонтекстОтвета);
		
		Возврат СформироватьОтвет(КонтекстОтвета);
		
	КонецЕсли;
	
	// Вызов обработчика
	РезультатОбработчика = Неопределено;
	Команда = "РезультатОбработчика = " + КонтекстЗапроса.ОписаниеМетода.Обработчик + "(КонтекстЗапроса, КонтекстЗамера);";
	
	Попытка
		Выполнить(Команда);
	Исключение
		
		ТипОтвета = Перечисления.ТипыОтветовREST.ВнутренняяОшибка;
		
		ОписаниеОшибки = ОписаниеОшибки();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		РезультатОбработчика = СформироватьРезультатОбработчика(ТипОтвета, ОписаниеОшибки);
		
		КонтекстОтвета = СформироватьДанныеКонтекстаОтвета(РезультатОбработчика, КонтекстЗапроса);
		
		ЛогированиеREST.ЗафиксироватьОшибку(КонтекстЗамера, "Ошибка обработчика метода", ОписаниеОшибки, ИнформацияОбОшибке);
		ЛогированиеREST.ЗавершитьЗамер(КонтекстЗамера, КонтекстОтвета);
		
		Возврат СформироватьОтвет(КонтекстОтвета);
		
	КонецПопытки;
	
	// Формирование пользовательского ответа
	Попытка
		КонтекстОтвета = СформироватьДанныеКонтекстаОтвета(РезультатОбработчика, КонтекстЗапроса);
	Исключение
		
		ТипОтвета = Перечисления.ТипыОтветовREST.ВнутренняяОшибка;
		
		ОписаниеОшибки = ОписаниеОшибки();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		РезультатОбработчика = СформироватьРезультатОбработчика(ТипОтвета, ОписаниеОшибки);
		
		КонтекстОтвета = СформироватьДанныеКонтекстаОтвета(РезультатОбработчика, КонтекстЗапроса);
		
		ЛогированиеREST.ЗафиксироватьОшибку(КонтекстЗамера, "Ошибка формирования метода", ОписаниеОшибки, ИнформацияОбОшибке);
		ЛогированиеREST.ЗавершитьЗамер(КонтекстЗамера, КонтекстОтвета);
		
		Возврат СформироватьОтвет(КонтекстОтвета);
		
	КонецПопытки;
	
	//
	ЛогированиеREST.ЗавершитьЗамер(КонтекстЗамера, КонтекстОтвета);
	
	Возврат СформироватьОтвет(КонтекстОтвета);
	
КонецФункции

Функция СформироватьРезультатОбработчика(ТипОтвета, СодержаниеОтвета = Неопределено, ЗаголовкиОтвета = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТипОтвета", ТипОтвета);
	Результат.Вставить("СодержаниеОтвета", СодержаниеОтвета);
	Результат.Вставить("ЗаголовкиОтвета", ЗаголовкиОтвета);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОбработчикМетодаДокументацииСервиса(КонтекстЗапроса, КонтекстЗамера) Экспорт
	
	Иконка16Ссылка = КонтекстЗапроса.КорневойURL + "/favicon-16x16.png";
	Иконка32Ссылка = КонтекстЗапроса.КорневойURL + "/favicon-32x32.png";
	СтилиСсылка = КонтекстЗапроса.КорневойURL + "/swagger-ui.css";
	СкриптыСсылка = КонтекстЗапроса.КорневойURL + "/swagger-ui-bundle.js";
	СпецификацияСсылка = КонтекстЗапроса.КорневойURL + "/openapi.json";
	
	//
	ТипОтвета = Перечисления.ТипыОтветовREST.Успешно;
	
	СодержаниеОтвета = ПолучитьОбщийМакет("СпецификацияСтраницаREST").ПолучитьТекст();
	СодержаниеОтвета = СтрЗаменить(СодержаниеОтвета, "[Заголовок]", "Swagger UI");
	СодержаниеОтвета = СтрЗаменить(СодержаниеОтвета, "[Иконка16Ссылка]", Иконка16Ссылка);
	СодержаниеОтвета = СтрЗаменить(СодержаниеОтвета, "[Иконка32Ссылка]", Иконка32Ссылка);
	СодержаниеОтвета = СтрЗаменить(СодержаниеОтвета, "[СтилиСсылка]", СтилиСсылка);
	СодержаниеОтвета = СтрЗаменить(СодержаниеОтвета, "[СкриптыСсылка]", СкриптыСсылка);
	СодержаниеОтвета = СтрЗаменить(СодержаниеОтвета, "[СпецификацияСсылка]", СпецификацияСсылка);
	
	ЗаголовкиОтвета = Новый Соответствие;
	ЗаголовкиОтвета.Вставить("Content-Type", "text/html; charset=utf-8");
	
	Возврат СформироватьРезультатОбработчика(ТипОтвета, СодержаниеОтвета, ЗаголовкиОтвета);
	
КонецФункции

Функция ОбработчикМетодаИконка16ДокументацииСервиса(КонтекстЗапроса, КонтекстЗамера) Экспорт
	
	ТипОтвета = Перечисления.ТипыОтветовREST.Успешно;
	
	СодержаниеОтвета = ПолучитьОбщийМакет("СпецификацияИконка16СтраницыREST");
	
	ЗаголовкиОтвета = Новый Соответствие;
	ЗаголовкиОтвета.Вставить("Content-Type", "image/png");
	
	Возврат СформироватьРезультатОбработчика(ТипОтвета, СодержаниеОтвета, ЗаголовкиОтвета);
	
КонецФункции

Функция ОбработчикМетодаИконка32ДокументацииСервиса(КонтекстЗапроса, КонтекстЗамера) Экспорт
	
	ТипОтвета = Перечисления.ТипыОтветовREST.Успешно;
	
	СодержаниеОтвета = ПолучитьОбщийМакет("СпецификацияИконка32СтраницыREST");
	
	ЗаголовкиОтвета = Новый Соответствие;
	ЗаголовкиОтвета.Вставить("Content-Type", "image/png");
	
	Возврат СформироватьРезультатОбработчика(ТипОтвета, СодержаниеОтвета, ЗаголовкиОтвета);
	
КонецФункции

Функция ОбработчикМетодаСтилейДокументацииСервиса(КонтекстЗапроса, КонтекстЗамера) Экспорт
	
	ТипОтвета = Перечисления.ТипыОтветовREST.Успешно;
	
	СодержаниеОтвета = ПолучитьОбщийМакет("СпецификацияСтилиСтраницыREST").ПолучитьТекст();
	
	ЗаголовкиОтвета = Новый Соответствие;
	ЗаголовкиОтвета.Вставить("Content-Type", "text/css; charset=utf-8");
	
	Возврат СформироватьРезультатОбработчика(ТипОтвета, СодержаниеОтвета, ЗаголовкиОтвета);
	
КонецФункции

Функция ОбработчикМетодаСкриптовДокументацииСервиса(КонтекстЗапроса, КонтекстЗамера) Экспорт
	
	ТипОтвета = Перечисления.ТипыОтветовREST.Успешно;
	
	СодержаниеОтвета = ПолучитьОбщийМакет("СпецификацияСкриптыСтраницыREST").ПолучитьТекст();
	
	ЗаголовкиОтвета = Новый Соответствие;
	ЗаголовкиОтвета.Вставить("Content-Type", "application/javascript; charset=utf-8");
	
	Возврат СформироватьРезультатОбработчика(ТипОтвета, СодержаниеОтвета, ЗаголовкиОтвета);
	
КонецФункции

Функция ОбработчикМетодаСпецификацииСервиса(КонтекстЗапроса, КонтекстЗамера) Экспорт
	
	ТипОтвета = Перечисления.ТипыОтветовREST.Успешно;
	
	СодержаниеОтвета = СпецификацияREST.ПолучитьСпецификациюСервиса(КонтекстЗапроса.ОписаниеСервиса, КонтекстЗапроса.КорневойURL);
	
	ЗаголовкиОтвета = Новый Соответствие;
	ЗаголовкиОтвета.Вставить("Content-Type", "application/json");
	
	Возврат СформироватьРезультатОбработчика(ТипОтвета, СодержаниеОтвета, ЗаголовкиОтвета);
	
КонецФункции

Функция ОбработчикМетодаСостоянияСервиса(КонтекстЗапроса, КонтекстЗамера) Экспорт
	
	ТипОтвета = Перечисления.ТипыОтветовREST.Успешно;
	
	СодержаниеОтвета = Новый Структура;
	СодержаниеОтвета.Вставить("status", "pass");
	СодержаниеОтвета.Вставить("description", КонтекстЗапроса.ОписаниеСервиса.КраткоеОписание);
	
	ЗаголовкиОтвета = Новый Соответствие;
	ЗаголовкиОтвета.Вставить("Content-Type", "application/json");
	
	Возврат СформироватьРезультатОбработчика(ТипОтвета, СодержаниеОтвета, ЗаголовкиОтвета);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаЗапроса

Процедура ОпределитьОписаниеЗапроса(КонтекстЗапроса)
	
	// ОписаниеСервиса
	ОписаниеСервиса = УправлениеRESTПовтИсп.ПолучитьОписаниеСервиса(КонтекстЗапроса.КлючСервиса);
	
	Если ОписаниеСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ОписаниеРесурса
	ОписаниеРесурса = ОписаниеREST.ПолучитьОписаниеРесурса(ОписаниеСервиса, КонтекстЗапроса.ВызываемыйРесурс);
	
	Если ОписаниеРесурса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ОписаниеМетода
	ОписаниеМетода = ОписаниеРесурса.Методы.Получить(КонтекстЗапроса.МетодЗапроса);
	
	Если ОписаниеМетода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	КонтекстЗапроса.ОписаниеСервиса = ОписаниеСервиса;
	КонтекстЗапроса.ОписаниеРесурса = ОписаниеРесурса;
	КонтекстЗапроса.ОписаниеМетода = ОписаниеМетода;
	
КонецПроцедуры

Функция АвторизацияПройдена(КонтекстЗапроса)
	
	Если КонтекстЗапроса.ОписаниеМетода.ЕстьАвторизация Тогда
		
		Индекс = КонтекстЗапроса.ОписаниеМетода.Доступ.Найти(КонтекстЗапроса.ИмяПользователя);
		
		Если Индекс = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьКонтекстЗапросаПоСпецификации(КонтекстЗапроса)
	
	Результат = Новый Массив;
	
	// Инициализация общих определений объектов
	ОписаниеСервиса = КонтекстЗапроса.ОписаниеСервиса;
	ОписаниеРесурса = КонтекстЗапроса.ОписаниеРесурса;
	ОписаниеМетода = КонтекстЗапроса.ОписаниеМетода;
	ОпределенияОбъектов = ОписаниеСервиса.ОпределенияОбъектов;
	
	// Заполнение параметров URL
	Если ОписаниеРесурса.ЕстьПараметрыURL Тогда
		
		СоставURLЗапроса = ОбщегоНазначенияREST.РазделитьURL(КонтекстЗапроса.ВызываемыйРесурс);
		
		Для ии = 0 По СоставURLЗапроса.Количество() - 1 Цикл
			
			ЭлементЗапроса = СоставURLЗапроса[ии];
			
			ОписаниеПараметраURL = ОписаниеРесурса.ПараметрыURL.Получить(ии);
			
			Если ЗначениеЗаполнено(ОписаниеПараметраURL) Тогда
				
				ИмяПараметра = ОписаниеПараметраURL.ИмяПараметра;
				Значение = ЭлементЗапроса;
				
				ПриведенноеЗначение = ПривестиЗначениеКТипу(Значение, ОписаниеПараметраURL.ТипДанных);
				
				Если ПриведенноеЗначение = Неопределено Тогда
					
					ДеталиОшибки = Новый Структура;
					
					ДеталиОшибки.Вставить("loc", ИмяПараметра);
					ДеталиОшибки.Вставить("msg", "Ошибка приведения к типу " + ОписаниеПараметраURL.ТипДанных);
					
					Результат.Добавить(ДеталиОшибки);
					
					Продолжить;
					
				КонецЕсли;
				
				КонтекстЗапроса.ПараметрыURL.Вставить(ИмяПараметра, ПриведенноеЗначение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение заголовков запроса
	Для Каждого КЗ Из ОписаниеМетода.Заголовки Цикл
		
		ИмяПараметра = КЗ.Ключ;
		ОписаниеПараметраЗапроса = КЗ.Значение;
		
		Значение = КонтекстЗапроса.ИсходныйЗапрос.Заголовки.Получить(ИмяПараметра);
		
		Если Значение = Неопределено И ОписаниеПараметраЗапроса.Обязательный Тогда
			
			ДеталиОшибки = Новый Структура;
			
			ДеталиОшибки.Вставить("loc", ИмяПараметра);
			ДеталиОшибки.Вставить("msg", "Отсутствует обязательный заголовок запроса");
			
			Результат.Добавить(ДеталиОшибки);
			
			Продолжить;
			
		КонецЕсли;
		
		ПриведенноеЗначение = ПривестиЗначениеКТипу(Значение, ОписаниеПараметраЗапроса.ТипДанных);
		
		Если ПриведенноеЗначение = Неопределено Тогда
			
			ДеталиОшибки = Новый Структура;
			
			ДеталиОшибки.Вставить("loc", ИмяПараметра);
			ДеталиОшибки.Вставить("msg", "Ошибка приведения к типу " + ОписаниеПараметраЗапроса.ТипДанных);
			
			Результат.Добавить(ДеталиОшибки);
			
			Продолжить;
			
		КонецЕсли;
		
		КонтекстЗапроса.ЗаголовкиЗапроса.Вставить(ИмяПараметра, ПриведенноеЗначение);
		
	КонецЦикла;
	
	// Заполнение параметров запроса
	Для Каждого КЗ Из ОписаниеМетода.Параметры Цикл
		
		ИмяПараметра = КЗ.Ключ;
		ОписаниеПараметраЗапроса = КЗ.Значение;
		
		Обязательный = ОписаниеПараметраЗапроса.Обязательный;
		ТипДанных = ОписаниеПараметраЗапроса.ТипДанных;
		ОпределениеОбъекта = ОписаниеПараметраЗапроса.ОпределениеОбъекта;
		
		Значение = КонтекстЗапроса.ИсходныйЗапрос.Параметры.Получить(ИмяПараметра);
		
		Если Значение = Неопределено Тогда
			
			Если Обязательный Тогда
				
				ДеталиОшибки = Новый Структура;
				
				ДеталиОшибки.Вставить("loc", ИмяПараметра);
				ДеталиОшибки.Вставить("msg", "Отсутствует обязательный параметр запроса");
				
				Результат.Добавить(ДеталиОшибки);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТипДанных = "Перечисление" Тогда
			
			Попытка
				ПриведенноеЗначение = СпецификацияREST.ПолучитьСистемныйОбъектПоОписанию(ТипДанных, ОпределениеОбъекта, Значение, ОпределенияОбъектов);
			Исключение
				
				ПриведенноеЗначение = Неопределено;
				
				ДеталиОшибки = Новый Структура;
			
				ДеталиОшибки.Вставить("loc", ИмяПараметра);
				ДеталиОшибки.Вставить("msg", "Не найдено свойство " + СокрЛП(Значение));
				
				Результат.Добавить(ДеталиОшибки);
				
				Продолжить;
				
			КонецПопытки;
			
		Иначе
			
			ПриведенноеЗначение = ПривестиЗначениеКТипу(Значение, ТипДанных);
			
			Если ПриведенноеЗначение = Неопределено Тогда
				
				ДеталиОшибки = Новый Структура;
				
				ДеталиОшибки.Вставить("loc", ИмяПараметра);
				ДеталиОшибки.Вставить("msg", "Ошибка приведения к типу " + ТипДанных);
				
				Результат.Добавить(ДеталиОшибки);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КонтекстЗапроса.ПараметрыЗапроса.Вставить(ИмяПараметра, ПриведенноеЗначение);
		
	КонецЦикла;
	
	// Заполнение тела запроса
	ТипДанных = ОписаниеМетода.ТипДанных;
	ОпределениеОбъекта = ОписаниеМетода.ОпределениеОбъекта;
	
	Если Не ТипДанных = "Пусто" Тогда
		
		ПриведенноеЗначение = ПривестиЗначениеКТипу(КонтекстЗапроса.ИсходныйЗапрос.ТелоСтрока, ТипДанных);
		
		Если ПриведенноеЗначение = Неопределено Тогда
			
			ДеталиОшибки = Новый Структура;
			
			ДеталиОшибки.Вставить("loc", "body");
			ДеталиОшибки.Вставить("msg", "Ошибка приведения тела запроса к определению " + ОписаниеМетода.ТипДанных);
			
			Результат.Добавить(ДеталиОшибки);
			
		КонецЕсли;
		
		Если ТипДанных = "Объект" Или ТипДанных = "Массив" Тогда
			
			Попытка
				СистемныйОбъект = СпецификацияREST.ПолучитьСистемныйОбъектПоОписанию(ТипДанных, ОпределениеОбъекта, ПриведенноеЗначение, ОпределенияОбъектов);
			Исключение
				
				СистемныйОбъект = Неопределено;
				ОписаниеОшибки = ОписаниеОшибки();
				ИмяСвойства = СтрРазделить(ОписаниеОшибки, ":", Ложь)[1];
				
				ДеталиОшибки = Новый Структура;
			
				ДеталиОшибки.Вставить("loc", "body");
				ДеталиОшибки.Вставить("msg", "Не найдено свойство " + СокрЛП(ИмяСвойства));
				
				Результат.Добавить(ДеталиОшибки);
				
			КонецПопытки;
			
			КонтекстЗапроса.ТелоЗапроса = СистемныйОбъект;
			
		Иначе
			КонтекстЗапроса.ТелоЗапроса = ПриведенноеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОтвет(КонтекстОтвета)
	
	Результат = Новый HTTPСервисОтвет(КонтекстОтвета.Код);
	
	Если ЗначениеЗаполнено(КонтекстОтвета.ТелоСтрока) Тогда
		Результат.УстановитьТелоИзСтроки(КонтекстОтвета.ТелоСтрока);
	ИначеЕсли ЗначениеЗаполнено(КонтекстОтвета.ТелоДвоичныеДанные) Тогда
		Результат.УстановитьТелоИзДвоичныхДанных(КонтекстОтвета.ТелоДвоичныеДанные);
	КонецЕсли;
	
	Для Каждого КЗ Из КонтекстОтвета.Заголовки Цикл
		Результат.Заголовки.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеСтруктурДанных

Функция СформироватьДанныеКонтекстаЗапроса(Запрос)
	
	ДанныеИсходногоЗапроса = СформироватьДанныеИсходногоЗапроса(Запрос);
	
	ИмяПубликации = ПолучитьИмяПубликации(ДанныеИсходногоЗапроса);
	КлючСервиса = ПолучитьКлючСервиса(ДанныеИсходногоЗапроса);
	ВызываемыйРесурс = ПолучитьРесурсЗапроса(Запрос);
	ЭтоСлужебныйРесурс = ОбщегоНазначенияREST.ЭтоСлужебныйРесурс(ВызываемыйРесурс);
	КорневойURL = ПолучитьКорневойURL(ДанныеИсходногоЗапроса);
	ИмяПользователя = ПолучитьИмяПользователя();
	
	//
	Результат = СтруктураДанныхКонтекстаЗапроса();
	
	Результат.ИсходныйЗапрос = ДанныеИсходногоЗапроса;
	Результат.ИмяПубликации = ИмяПубликации;
	Результат.КлючСервиса = КлючСервиса;
	Результат.ВызываемыйРесурс = ВызываемыйРесурс;
	Результат.ЭтоСлужебныйРесурс = ЭтоСлужебныйРесурс;
	Результат.МетодЗапроса = Перечисления.МетодыЗапросаREST[Запрос.HTTPМетод];
	Результат.КорневойURL = КорневойURL;
	Результат.ИмяПользователя = ИмяПользователя;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеИсходногоЗапроса(Запрос)
	
	Результат = СтруктураДанныхИсходныйЗапрос();
	
	// Данные напрямую из системного объекта
	Результат.БазовыйURL = Запрос.БазовыйURL;
	Результат.ОтносительныйURL = Запрос.ОтносительныйURL;
	Результат.Метод = Запрос.HTTPМетод;
	Результат.Заголовки = Запрос.Заголовки;
	Результат.Параметры = Запрос.ПараметрыЗапроса;
	Результат.ТелоСтрока = Запрос.ПолучитьТелоКакСтроку();
	Результат.ТелоДвоичныеДанные = Запрос.ПолучитьТелоКакДвоичныеДанные();
	
	//
	Результат.Протокол = СтрРазделить(Результат.БазовыйURL, "://")[0];
	
	//
	Если Результат.Параметры.Количество() Тогда
		
		Результат.ПараметрыСтрока = "?";
		
		Для Каждого КЗ Из Результат.Параметры Цикл
			Результат.ПараметрыСтрока = Результат.ПараметрыСтрока + КЗ.Ключ + "=" + КЗ.Значение + "&";
		КонецЦикла;
		
		Результат.ПараметрыСтрока = Лев(Результат.ПараметрыСтрока, СтрДлина(Результат.ПараметрыСтрока) - 1)
		
	КонецЕсли;
	
	//
	Результат.ПолныйURL = Результат.БазовыйURL + Результат.ОтносительныйURL + Результат.ПараметрыСтрока;
	
	//
	СерверСПортом = СтрРазделить(СтрЗаменить(Результат.БазовыйURL, Результат.Протокол + "://", ""), "/")[0];
	
	Если СтрНайти(СерверСПортом, ":") Тогда
		
		Результат.Сервер = СтрРазделить(СерверСПортом, ":")[0];
		Результат.Порт = Число(СтрРазделить(СерверСПортом, ":")[1]);
		
	Иначе
		
		Результат.Сервер = СерверСПортом;
		Результат.Порт = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеКонтекстаОтвета(РезультатОбработчика, КонтекстЗапроса)
	
	ТипОтвета = РезультатОбработчика.ТипОтвета;
	СодержаниеОтвета = РезультатОбработчика.СодержаниеОтвета;
	ЗаголовкиОтвета = РезультатОбработчика.ЗаголовкиОтвета;
	
	//
	Результат = СтруктураДанныхКонтекстаОтвета();
	
	Если ТипОтвета = Перечисления.ТипыОтветовREST.Успешно Тогда
		
		ОписаниеОтвета = КонтекстЗапроса.ОписаниеМетода.Ответы.Получить(ТипОтвета);
		
		КодОтвета = ОписаниеОтвета.КодОтвета;
		ТипДанных = ОписаниеОтвета.ТипДанных;
		ОпределениеОбъекта = ОписаниеОтвета.ОпределениеОбъекта;
		
		Результат.Код = КодОтвета;
		
		Если КонтекстЗапроса.ЭтоСлужебныйРесурс Тогда
			
			Если ТипДанных = "Объект" Тогда
				Результат.ТелоСтрока = ЗаписатьОбъектВJSON(СодержаниеОтвета);
			ИначеЕсли ТипДанных = "ДвоичныеДанные" Тогда
				Результат.ТелоДвоичныеДанные = СодержаниеОтвета;
			Иначе
				Результат.ТелоСтрока = СодержаниеОтвета;
			КонецЕсли;
			
		ИначеЕсли ТипДанных = "Строка" Тогда
			
			Результат.ТелоСтрока = СодержаниеОтвета;
			Результат.Заголовки.Вставить("Content-Type", "text/plain; charset=utf-8");
			
		ИначеЕсли ТипДанных = "ДвоичныеДанные" Тогда
			
			Результат.ТелоДвоичныеДанные = СодержаниеОтвета;
			
		ИначеЕсли ТипДанных <> "Пусто" Тогда
			
			ОпределенияОбъектов = КонтекстЗапроса.ОписаниеСервиса.ОпределенияОбъектов;
			
			Объект = СпецификацияREST.ПолучитьОбъектПоОписанию(ТипДанных, ОпределениеОбъекта, СодержаниеОтвета, ОпределенияОбъектов);
			
			Результат.ТелоСтрока = ЗаписатьОбъектВJSON(Объект);
			Результат.Заголовки.Вставить("Content-Type", "application/json");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаголовкиОтвета) Тогда
			
			Для Каждого КЗ Из ЗаголовкиОтвета Цикл
				Результат.Заголовки.Вставить(КЗ.Ключ, КЗ.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		СлужебныеТипыОтветов = Перечисления.ТипыОтветовREST.ПолучитьСлужебныеВидыОтветов();
		КодОтвета = СлужебныеТипыОтветов.Получить(ТипОтвета);
		
		ОписаниеОшибки = СтруктураДанныхОписаниеОшибки();
		ОписаниеОшибки.detail = СодержаниеОтвета;
		
		Результат.Код = КодОтвета;
		Результат.ТелоСтрока = ЗаписатьОбъектВJSON(ОписаниеОшибки);
		Результат.Заголовки.Вставить("Content-Type", "application/json");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеСтруктурыДанных

Функция СтруктураДанныхКонтекстаЗапроса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИсходныйЗапрос", Новый Структура);
	Результат.Вставить("ИмяПубликации", "");
	Результат.Вставить("КлючСервиса", "");
	Результат.Вставить("ВызываемыйРесурс", "");
	Результат.Вставить("ЭтоСлужебныйРесурс", Ложь);
	Результат.Вставить("МетодЗапроса", Перечисления.МетодыЗапросаREST.ПустаяСсылка());
	Результат.Вставить("КорневойURL", "");
	Результат.Вставить("ИмяПользователя", "");
	Результат.Вставить("ОписаниеСервиса", Неопределено);
	Результат.Вставить("ОписаниеРесурса", Неопределено);
	Результат.Вставить("ОписаниеМетода", Неопределено);
	Результат.Вставить("ПараметрыURL", Новый Соответствие);
	Результат.Вставить("ЗаголовкиЗапроса", Новый Соответствие);
	Результат.Вставить("ПараметрыЗапроса", Новый Соответствие);
	Результат.Вставить("ТелоЗапроса", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхИсходныйЗапрос()
	
	Результат = Новый Структура;
	
	Результат.Вставить("БазовыйURL", "");
	Результат.Вставить("ОтносительныйURL", "");
	Результат.Вставить("ПолныйURL", "");
	Результат.Вставить("Протокол", "");
	Результат.Вставить("Сервер", "");
	Результат.Вставить("Порт", Неопределено);
	Результат.Вставить("Метод", "");
	Результат.Вставить("Заголовки", Новый Соответствие);
	Результат.Вставить("Параметры", Новый Соответствие);
	Результат.Вставить("ПараметрыСтрока", "");
	Результат.Вставить("ТелоСтрока", "");
	Результат.Вставить("ТелоДвоичныеДанные", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхКонтекстаОтвета()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Код", 200);
	Результат.Вставить("ТелоСтрока", Неопределено);
	Результат.Вставить("ТелоДвоичныеДанные", Неопределено);
	Результат.Вставить("Заголовки", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхОписаниеОшибки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("detail");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ЕстьВерсия(URL)
	
	Возврат (Лев(URL, 2) = "/v" И Сред(URL, 4, 1) = "/");
	
КонецФункции

Функция ПолучитьИмяПубликации(Запрос)
	
	Адрес = Запрос.БазовыйURL;
	
	Позиция1 = СтрНайти(Адрес, "/hs/");
	Подстрока = Лев(Адрес, Позиция1 - 1);
	
	Позиция2 = СтрНайти(Подстрока, "/", НаправлениеПоиска.СКонца);
	
	Возврат Сред(Подстрока, Позиция2 + 1, СтрДлина(Подстрока))
	
КонецФункции

Функция ПолучитьКлючСервиса(Запрос)
	
	Адрес = Запрос.БазовыйURL;
	Позиция = СтрНайти(Адрес, "/", НаправлениеПоиска.СКонца);
	
	Результат = Сред(Адрес, Позиция + 1);
	
	Если ЕстьВерсия(Запрос.ОтносительныйURL) Тогда
		
		Результат = Результат + Лев(Запрос.ОтносительныйURL, 3);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРесурсЗапроса(Запрос)
	
	Если ЕстьВерсия(Запрос.ОтносительныйURL) Тогда
		
		Возврат Прав(Запрос.ОтносительныйURL, СтрДлина(Запрос.ОтносительныйURL) - 3);
		
	Иначе
		
		Возврат Запрос.ОтносительныйURL;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКорневойURL(Запрос)
	
	Если ЕстьВерсия(Запрос.ОтносительныйURL) Тогда
		
		Возврат Запрос.БазовыйURL + Лев(Запрос.ОтносительныйURL, 3);
		
	Иначе
		
		Возврат Запрос.БазовыйURL;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяПользователя()
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Возврат ПользовательИБ.Имя
	
КонецФункции

Функция ПривестиЗначениеКТипу(Значение, ТипДанных)
	
	Если ТипДанных = "Строка" Тогда
		
		Результат = Строка(Значение);
		
	ИначеЕсли ТипДанных = "ЦелоеЧисло"
		Или ТипДанных = "НецелоеЧисло" Тогда
		
		Попытка
			Результат = Число(Значение);
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипДанных = "Булево" Тогда
		
		Попытка
			Результат = Булево(Значение);
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипДанных = "Дата"
		Или ТипДанных = "ДатаВремя" Тогда
		
		Попытка
			Результат = XMLЗначение(Тип("Дата"), Значение);
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипДанных = "УИД" Тогда
		
		Попытка
			Результат = Новый УникальныйИдентификатор(Значение);
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипДанных = "Объект"
		Или ТипДанных = "Массив" Тогда
		
		Попытка
			Результат = ПолучитьОбъектИзJSON(Значение);
		Исключение
			Результат = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьОбъектВJSON(Объект)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПолучитьОбъектИзJSON(ТекстJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции

#КонецОбласти

#КонецОбласти

