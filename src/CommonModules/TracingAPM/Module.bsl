
#Область ПрограммныйИнтерфейс

Процедура ВыгрузитьЗамерЗапроса(КонтекстЗамера) Экспорт
	
	Если КонтекстЗамера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ТелоЗапроса = "";
	
	ДобавитьВТелоЗапросаМетаданные(ТелоЗапроса, КонтекстЗамера);
	ДобавитьВТелоЗапросаТранзакцию(ТелоЗапроса, КонтекстЗамера);
	ДобавитьВТелоЗапросаИнтервалы(ТелоЗапроса, КонтекстЗамера);
	ДобавитьВТелоЗапросаМетрики(ТелоЗапроса, КонтекстЗамера);
	ДобавитьВТелоЗапросаОшибки(ТелоЗапроса, КонтекстЗамера);
	
	ТелоЗапроса = СокрЛП(ТелоЗапроса);
	
	ОтправитьДанныеВСервис(ТелоЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВТелоЗапросаМетаданные(ТелоЗапроса, КонтекстЗамера)
	
	ЗамерМетаданные = СформироватьДанныеМетаданных(КонтекстЗамера);
	
	Оболочка = Новый Структура;
	Оболочка.Вставить("metadata", ЗамерМетаданные);
	
	ТелоЗапроса = ТелоЗапроса + ЗаписатьОбъектВNDJSON(Оболочка) + Символы.ПС;
	
КонецПроцедуры

Процедура ДобавитьВТелоЗапросаТранзакцию(ТелоЗапроса, КонтекстЗамера)
	
	ЗамерТранзакция = СформироватьДанныеТранзакции(КонтекстЗамера);
	
	Оболочка = Новый Структура;
	Оболочка.Вставить("transaction", ЗамерТранзакция);
	
	ТелоЗапроса = ТелоЗапроса + ЗаписатьОбъектВNDJSON(Оболочка) + Символы.ПС;
	
КонецПроцедуры

Процедура ДобавитьВТелоЗапросаИнтервалы(ТелоЗапроса, КонтекстЗамера)
	
	ЗамерИнтервалы = СформироватьИнтервалы(КонтекстЗамера);
	
	Для Каждого ЗамерИнтервал Из ЗамерИнтервалы Цикл
		
		Оболочка = Новый Структура;
		Оболочка.Вставить("span", ЗамерИнтервал);
		
		ТелоЗапроса = ТелоЗапроса + ЗаписатьОбъектВNDJSON(Оболочка) + Символы.ПС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВТелоЗапросаМетрики(ТелоЗапроса, КонтекстЗамера)
	
	ЗамерМетрики = СформироватьМетрики(КонтекстЗамера);
	
	Для Каждого ЗамерМетрика Из ЗамерМетрики Цикл
		
		Оболочка = Новый Структура;
		Оболочка.Вставить("metricset", ЗамерМетрика);
		
		ТелоЗапроса = ТелоЗапроса + ЗаписатьОбъектВNDJSON(Оболочка) + Символы.ПС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВТелоЗапросаОшибки(ТелоЗапроса, КонтекстЗамера)
	
	ЗамерОшибки = СформироватьОшибки(КонтекстЗамера);
	
	Для Каждого ЗамерОшибка Из ЗамерОшибки Цикл
		
		Оболочка = Новый Структура;
		Оболочка.Вставить("error", ЗамерОшибка);
		
		ТелоЗапроса = ТелоЗапроса + ЗаписатьОбъектВNDJSON(Оболочка) + Символы.ПС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьДанныеВСервис(ТелоЗапроса)
	
	HTTPЗапрос = Новый HTTPЗапрос("/intake/v2/events");
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
	HTTPЗапрос.Заголовки.Вставить("content-type", "application/x-ndjson; charset=UTF-8");
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 8200);
	HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
КонецПроцедуры

#Область ФормированиеСтруктурДанных

Функция СформироватьДанныеМетаданных(КонтекстЗамера)
	
	Результат = СтруктураДанныхМетаданные();
	
	Результат.service.name = КонтекстЗамера.Система + " " + КонтекстЗамера.ИмяСервиса;
	Результат.service.environment = КонтекстЗамера.Окружение;
	
	Результат.service.language.version = КонтекстЗамера.СистемнаяИнформация.ВерсияПлатформы1С;
	
	Результат.service.framework.name = КонтекстЗамера.СистемнаяИнформация.Конфигурация;
	Результат.service.framework.version = КонтекстЗамера.СистемнаяИнформация.ВерсияКонфигурации;
	
	Результат.system.platform = КонтекстЗамера.СистемнаяИнформация.ПлатформаОС;
	Результат.system.architecture = КонтекстЗамера.СистемнаяИнформация.ТипПлатформыОС;
	
	//
	ОчиститьПустыеЭлементыКоллекции(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеТранзакции(КонтекстЗамера)
	
	Если ЗначениеЗаполнено(КонтекстЗамера.ИсходныйЗапрос.ТелоСтрока) Тогда
		ТелоЗапроса = КонтекстЗамера.ИсходныйЗапрос.ТелоСтрока;
	Иначе
		ТелоЗапроса = Неопределено;
	КонецЕсли;
	
	//
	Результат = СтруктураДанныхТранзакция();
	
	//
	Результат.trace_id = КонтекстЗамера.ИдентификаторЗамера;
	Результат.id = КонтекстЗамера.ИдентификаторТранзакции;
	Результат.parent_id = КонтекстЗамера.ИдентификаторРодителя;
	Результат.timestamp = КонтекстЗамера.НачалоЗамера;
	Результат.name = КонтекстЗамера.ИсходныйЗапрос.Метод + " " + КонтекстЗамера.ИмяРесурса;
	Результат.duration = КонтекстЗамера.Длительность;
	Результат.result = "HTTP " + Окр(КонтекстЗамера.КодОтвета / 100) + "xx";
	
	//
	Результат.span_count.started = КонтекстЗамера.Интервалы.Количество();
	
	//
	Результат.context.request.method = КонтекстЗамера.ИсходныйЗапрос.Метод;
	Результат.context.request.headers = КонтекстЗамера.ИсходныйЗапрос.Заголовки;
	Результат.context.request.body = ТелоЗапроса;
	
	//
	ЗапросURL = СтруктураДанныхЗапросURLКонтекста();
	
	ПолныйURL = КонтекстЗамера.ИсходныйЗапрос.ПолныйURL;
	Протокол = КонтекстЗамера.ИсходныйЗапрос.Протокол;
	Сервер = КонтекстЗамера.ИсходныйЗапрос.Сервер;
	Порт = КонтекстЗамера.ИсходныйЗапрос.Порт;
	ПараметрыСтрока = КонтекстЗамера.ИсходныйЗапрос.ПараметрыСтрока;
	ПутьСПараметрами = СтрЗаменить(ПолныйURL, Протокол + "://" + Сервер + ?(ЗначениеЗаполнено(Порт), ":" + Порт, ""), "");
	
	ЗапросURL.full = ПолныйURL;
	ЗапросURL.hostname = Сервер;
	ЗапросURL.pathname = ПутьСПараметрами;
	ЗапросURL.port = Порт;
	ЗапросURL.protocol = Протокол;
	ЗапросURL.search = ПараметрыСтрока;
	
	Результат.context.request.url = ЗапросURL;
	
	//
	Результат.context.response.status_code = КонтекстЗамера.КодОтвета;
	Результат.context.response.headers = КонтекстЗамера.ЗаголовкиОтвета;
	
	Если ЗначениеЗаполнено(КонтекстЗамера.ТелоОтвета) Тогда
		Результат.context.custom = Новый Структура("response_body", КонтекстЗамера.ТелоОтвета);
	КонецЕсли;
	
	//
	ОчиститьПустыеЭлементыКоллекции(Результат, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьИнтервалы(КонтекстЗамера)
	
	Результат = Новый Массив;
	
	Для Каждого КЗ Из КонтекстЗамера.Интервалы Цикл
		
		Идентификатор = КЗ.Ключ;
		ИнтервалЗамера = КЗ.Значение;
		
		ОписаниеИнтервала = СтруктураДанныхИнтервал();
		
		ОписаниеИнтервала.id = Идентификатор;
		ОписаниеИнтервала.trace_id = КонтекстЗамера.ИдентификаторЗамера;
		ОписаниеИнтервала.transaction_id = КонтекстЗамера.ИдентификаторТранзакции;
		ОписаниеИнтервала.parent_id = КонтекстЗамера.ИдентификаторТранзакции;
		ОписаниеИнтервала.timestamp = ИнтервалЗамера.НачалоЗамера;
		ОписаниеИнтервала.duration = ИнтервалЗамера.Длительность;
		ОписаниеИнтервала.name = ИнтервалЗамера.Наименование;
		ОписаниеИнтервала.type = ИнтервалЗамера.Тип;
		ОписаниеИнтервала.subtype = ИнтервалЗамера.Подтип;
		ОписаниеИнтервала.action = ИнтервалЗамера.Действие;
		
		Если ИнтервалЗамера.Тип = "db" Тогда
			
			КонтекстДБ = СтруктураДанныхБДКонтекстаИнтервала();
			
			КонтекстДБ.statement = ИнтервалЗамера.Запрос;
			
			ОписаниеИнтервала.context.db = КонтекстДБ;
			
		ИначеЕсли ИнтервалЗамера.Тип = "external" Тогда
			
			КонтекстВызов = СтруктураДанныхВызовКонтекстаИнтервала();
			
			КонтекстВызов.url = ИнтервалЗамера.Сервис;
			
			ОписаниеИнтервала.context.http = КонтекстВызов;
			
		КонецЕсли;
		
		//
		ОчиститьПустыеЭлементыКоллекции(ОписаниеИнтервала, Истина);
		
		Результат.Добавить(ОписаниеИнтервала);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьМетрики(КонтекстЗамера)
	
	Результат = Новый Массив;
	
	ОбщееВремяТранзакции = КонтекстЗамера.Длительность;
	ОбщееВремяИнтервалов = 0;
	КоличествоОбращенийКБД = 0;
	ОбщееВремяОбращенийКБД = 0;
	КоличествоВызововСервиса = 0;
	ОбщееВремяВызововСервиса = 0;
	
	// по интервалам
	Для Каждого КЗ Из КонтекстЗамера.Интервалы Цикл
		
		ИнтервалЗамера = КЗ.Значение;
		
		ОбщееВремяИнтервалов = ОбщееВремяИнтервалов + ИнтервалЗамера.Длительность;
		
		Если ИнтервалЗамера.Тип = "db" Тогда
			
			КоличествоОбращенийКБД = КоличествоОбращенийКБД + 1;
			ОбщееВремяОбращенийКБД = ОбщееВремяОбращенийКБД + ИнтервалЗамера.Длительность;
			
		ИначеЕсли ИнтервалЗамера.Тип = "external" Тогда
			
			КоличествоВызововСервиса = КоличествоВызововСервиса + 1;
			ОбщееВремяВызововСервиса = ОбщееВремяВызововСервиса + ИнтервалЗамера.Длительность;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// общая
	ОписаниеМетрики = СтруктураДанныхМетрика();
	
	ОписаниеМетрики.timestamp = КонтекстЗамера.КонецЗамера;
	ОписаниеМетрики.samples["transaction.duration.count"].Вставить("value", 1);
	ОписаниеМетрики.samples["transaction.duration.sum.us"].Вставить("value", ОбщееВремяТранзакции * 1000);
	ОписаниеМетрики.samples["span.self_time.count"].Вставить("value", 1);
	ОписаниеМетрики.samples["span.self_time.sum.us"].Вставить("value", (ОбщееВремяТранзакции - ОбщееВремяИнтервалов) * 1000);
	ОписаниеМетрики.transaction.name = КонтекстЗамера.ИсходныйЗапрос.Метод + " " + КонтекстЗамера.ИмяРесурса;
	ОписаниеМетрики.span.type = "app";
	
	ОчиститьПустыеЭлементыКоллекции(ОписаниеМетрики, Истина);
	
	Результат.Добавить(ОписаниеМетрики);
	
	// БД
	Если КоличествоОбращенийКБД <> 0 Тогда
		
		ОписаниеМетрики = СтруктураДанныхМетрика();
		
		ОписаниеМетрики.timestamp = КонтекстЗамера.КонецЗамера;
		ОписаниеМетрики.samples["span.self_time.count"].Вставить("value", КоличествоОбращенийКБД);
		ОписаниеМетрики.samples["span.self_time.sum.us"].Вставить("value", ОбщееВремяОбращенийКБД * 1000);
		ОписаниеМетрики.transaction.name = КонтекстЗамера.ИсходныйЗапрос.Метод + " " + КонтекстЗамера.ИмяРесурса;
		ОписаниеМетрики.span.type = "db";
		ОписаниеМетрики.span.subtype = "orm";
		
		ОчиститьПустыеЭлементыКоллекции(ОписаниеМетрики, Истина);
		
		Результат.Добавить(ОписаниеМетрики);
		
	КонецЕсли;
	
	// Сервисы
	Если КоличествоВызововСервиса <> 0 Тогда
		
		ОписаниеМетрики = СтруктураДанныхМетрика();
		
		ОписаниеМетрики.timestamp = КонтекстЗамера.КонецЗамера;
		ОписаниеМетрики.samples["span.self_time.count"].Вставить("value", КоличествоВызововСервиса);
		ОписаниеМетрики.samples["span.self_time.sum.us"].Вставить("value", ОбщееВремяВызововСервиса * 1000);
		ОписаниеМетрики.transaction.name = КонтекстЗамера.ИсходныйЗапрос.Метод + " " + КонтекстЗамера.ИмяРесурса;
		ОписаниеМетрики.span.type = "external";
		ОписаниеМетрики.span.subtype = "http";
		
		ОчиститьПустыеЭлементыКоллекции(ОписаниеМетрики, Истина);
		
		Результат.Добавить(ОписаниеМетрики);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОшибки(КонтекстЗамера)
	
	Результат = Новый Массив;
	
	Для Каждого КЗ Из КонтекстЗамера.Ошибки Цикл
		
		Идентификатор = КЗ.Ключ;
		ОшибкаЗамера = КЗ.Значение;
		
		ОписаниеОшибки = СтруктураДанныхОшибка();
		
		ОписаниеОшибки.id = Идентификатор;
		ОписаниеОшибки.trace_id = КонтекстЗамера.ИдентификаторЗамера;
		ОписаниеОшибки.transaction_id = КонтекстЗамера.ИдентификаторТранзакции;
		ОписаниеОшибки.parent_id = КонтекстЗамера.ИдентификаторТранзакции;
		ОписаниеОшибки.timestamp = ОшибкаЗамера.ОтметкаВремени;
		ОписаниеОшибки.culprit = ОшибкаЗамера.ИсходнаяСтрока;
		
		ОписаниеОшибки.exception.message = ОшибкаЗамера.ОписаниеОшибки;
		ОписаниеОшибки.exception.module = ОшибкаЗамера.ИмяМодуля;
		ОписаниеОшибки.exception.code = ОшибкаЗамера.НомерСтроки;
		
		ОписаниеОшибки.log.message = ОшибкаЗамера.Описание;
		
		ОчиститьПустыеЭлементыКоллекции(ОписаниеОшибки, Истина);
		
		Результат.Добавить(ОписаниеОшибки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОписаниеСлужебныхСтруктур

Функция СтруктураДанныхМетаданные()
	
	Результат = Новый Структура;
	
	Результат.Вставить("system", СтруктураДанныхСистема());
	Результат.Вставить("service", СтруктураДанныхСервис());
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхСистема()
	
	Результат = Новый Структура;
	
	Результат.Вставить("platform", "");
	Результат.Вставить("architecture", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхСервис()
	
	Результат = Новый Структура;
	
	Результат.Вставить("name", "");
	Результат.Вставить("environment", "");
	Результат.Вставить("agent", СтруктураДанныхАгентСервиса());
	Результат.Вставить("language", СтруктураДанныхЯзыкСервиса());
	Результат.Вставить("framework", СтруктураДанныхКонфигурацияСервиса());
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхАгентСервиса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("name", ИмяАгента());
	Результат.Вставить("version", ВерсияАгента());
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхЯзыкСервиса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("name", ВнутреннееИмяЯзыка());
	Результат.Вставить("version", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхКонфигурацияСервиса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("name", "");
	Результат.Вставить("version", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхТранзакция()
	
	Результат = Новый Структура;
	
	Результат.Вставить("trace_id", "");
	Результат.Вставить("id", "");
	Результат.Вставить("parent_id", "");
	Результат.Вставить("timestamp", 0);
	Результат.Вставить("name", "");
	Результат.Вставить("type", "request");
	Результат.Вставить("span_count", СтруктураДанныхКоличествоИнтервалов());
	Результат.Вставить("duration", 0);
	Результат.Вставить("result", "");
	Результат.Вставить("sampled", Истина);
	Результат.Вставить("context",  СтруктураДанныхКонтекст());
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхКоличествоИнтервалов()
	
	Результат = Новый Структура;
	
	Результат.Вставить("started", 0);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхКонтекст()
	
	Результат = Новый Структура;
	
	Результат.Вставить("request", СтруктураДанныхЗапросКонтекста());
	Результат.Вставить("response", СтруктураДанныхОтветКонтекста());
	Результат.Вставить("custom", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхЗапросКонтекста()
	
	Результат = Новый Структура;
	
	Результат.Вставить("method", "");
	Результат.Вставить("body", Неопределено);
	Результат.Вставить("headers", Неопределено);
	Результат.Вставить("url", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхЗапросURLКонтекста()
	
	Результат = Новый Структура;
	
	Результат.Вставить("full", "");
	Результат.Вставить("hostname", "");
	Результат.Вставить("pathname", "");
	Результат.Вставить("port", Неопределено);
	Результат.Вставить("protocol", "");
	Результат.Вставить("search", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхОтветКонтекста()
	
	Результат = Новый Структура;
	
	Результат.Вставить("status_code", 0);
	Результат.Вставить("headers", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхИнтервал()
	
	Результат = Новый Структура;
	
	Результат.Вставить("trace_id", "");
	Результат.Вставить("transaction_id", "");
	Результат.Вставить("id", "");
	Результат.Вставить("parent_id", "");
	Результат.Вставить("timestamp", 0);
	Результат.Вставить("duration", 0);
	Результат.Вставить("name", "");
	Результат.Вставить("type", "");
	Результат.Вставить("subtype", "");
	Результат.Вставить("action", "");
	Результат.Вставить("context", СтруктураДанныхКонтекстИнтервала());
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхКонтекстИнтервала()
	
	Результат = Новый Структура;
	
	Результат.Вставить("db", Неопределено);
	Результат.Вставить("http", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхБДКонтекстаИнтервала()
	
	Результат = Новый Структура;
	
	Результат.Вставить("statement", "");
	Результат.Вставить("type", "sql");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхВызовКонтекстаИнтервала()
	
	Результат = Новый Структура;
	
	Результат.Вставить("url", "");
	Результат.Вставить("status_code", 0);
	Результат.Вставить("method", Неопределено);
	Результат.Вставить("response", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхМетрика()
	
	Результат = Новый Структура;
	
	Результат.Вставить("timestamp", 0);
	Результат.Вставить("samples", СтруктураДанныхОбразецМетрики());
	Результат.Вставить("transaction", СтруктураДанныхТранзакцияМетрики());
	Результат.Вставить("span", СтруктураДанныхИнтревалМетрики());
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхОбразецМетрики()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("transaction.duration.count", Новый Структура);
	Результат.Вставить("transaction.duration.sum.us", Новый Структура);
	Результат.Вставить("span.self_time.count", Новый Структура);
	Результат.Вставить("span.self_time.count", Новый Структура);
	Результат.Вставить("span.self_time.sum.us", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхТранзакцияМетрики()
	
	Результат = Новый Структура;
	
	Результат.Вставить("type", "request");
	Результат.Вставить("name", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхИнтревалМетрики()
	
	Результат = Новый Структура;
	
	Результат.Вставить("type", "");
	Результат.Вставить("subtype", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхОшибка()
	
	Результат = Новый Структура;
	
	Результат.Вставить("trace_id", "");
	Результат.Вставить("transaction_id", "");
	Результат.Вставить("id", "");
	Результат.Вставить("parent_id", "");
	Результат.Вставить("timestamp", 0);
	Результат.Вставить("culprit", "");
	Результат.Вставить("exception", СтруктураДанныхИсключение());
	Результат.Вставить("log", СтруктураДанныхЛогОшибки());
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхИсключение()
	
	Результат = Новый Структура;
	
	Результат.Вставить("message", "");
	Результат.Вставить("handled", Истина);
	Результат.Вставить("module", "");
	Результат.Вставить("code", 0);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхЛогОшибки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("message", "");
	Результат.Вставить("level", "error");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ИмяАгента()
	Возврат "AIS-APM";
КонецФункции

Функция ВерсияАгента()
	Возврат "1.0";
КонецФункции

Функция ВнутреннееИмяЯзыка()
	Возврат "1C";
КонецФункции

Функция ЗаписатьОбъектВNDJSON(Объект)
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Процедура ОчиститьПустыеЭлементыКоллекции(Коллекция, ОчищатьПустыеКоллекции = Ложь)
	
	КлючиДляУдаления = Новый Массив;
	
	Для Каждого КЗ Из Коллекция Цикл
		
		Если КЗ.Значение = Неопределено Тогда
			
			КлючиДляУдаления.Добавить(КЗ.Ключ);
			
		ИначеЕсли КЗ.Значение = "" Тогда
			
			КлючиДляУдаления.Добавить(КЗ.Ключ);
			
		ИначеЕсли ОчищатьПустыеКоллекции Тогда
			
			ЭтоКоллекция = (ТипЗнч(КЗ.Значение) = Тип("Массив") Или ТипЗнч(КЗ.Значение) = Тип("Соответствие") Или ТипЗнч(КЗ.Значение) = Тип("Структура"));
			
			Если ЭтоКоллекция И Не КЗ.Значение.Количество() Тогда
				КлючиДляУдаления.Добавить(КЗ.Ключ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Ключ Из КлючиДляУдаления Цикл
		Коллекция.Удалить(Ключ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
