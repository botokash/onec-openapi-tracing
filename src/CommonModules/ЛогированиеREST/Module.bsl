
#Область ПрограммныйИнтерфейс

Процедура ИнициализироватьИнтервалОбращенияКБД(КонтекстЗамера, Наименование, Запрос) Экспорт
	
	Интервал = СтруктураДанныхИнтервала();
	
	Интервал.Тип = "db";
	Интервал.Подтип = "orm";
	Интервал.Действие = "query";
	Интервал.Наименование = Наименование;
	Интервал.Запрос = Запрос;
	
	КонтекстЗамера.ТекущийИнтервал = Интервал.Идентификатор;
	КонтекстЗамера.Интервалы.Вставить(Интервал.Идентификатор, Интервал);
	
КонецПроцедуры

Процедура ИнициализироватьИнтервалВызоваСервиса(КонтекстЗамера, Наименование, Сервис) Экспорт
	
	Интервал = СтруктураДанныхИнтервала();
	
	Интервал.Тип = "external";
	Интервал.Подтип = "http";
	Интервал.Действие = "connect";
	Интервал.Наименование = Наименование;
	Интервал.Сервис = Сервис;
	
	КонтекстЗамера.ТекущийИнтервал = Интервал.Идентификатор;
	КонтекстЗамера.Интервалы.Вставить(Интервал.Идентификатор, Интервал);
	
КонецПроцедуры

Процедура ЗавершитьИнтервал(КонтекстЗамера) Экспорт
	
	КонецЗамера = ТекущаяДатаUnixtime();
	
	Интервал = КонтекстЗамера.Интервалы[КонтекстЗамера.ТекущийИнтервал];
	
	Интервал.КонецЗамера = КонецЗамера;
	Интервал.Длительность = (КонецЗамера - Интервал.НачалоЗамера) / 1000;
	
	КонтекстЗамера.ТекущийИнтервал = Неопределено;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибку(КонтекстЗамера, Событие, ОписаниеОшибки, ИнформацияОбОшибке = Неопределено) Экспорт
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		
		ПерваяСтрока = СтрПолучитьСтроку(ОписаниеОшибки, 1);
		Символ = СтрНайти(ПерваяСтрока, ":");
		СтрокаМодуль = Лев(ПерваяСтрока, Символ - 1);
		СтрокаОписание = СтрЗаменить(ПерваяСтрока, СтрокаМодуль, "");
		
		ИсходнаяСтрока = СтрЗаменить(СтрЗаменить(СтрокаМодуль, "{", ""), "}", "");
		Описание = СокрЛП(Прав(СтрокаОписание, СтрДлина(СтрокаОписание) - 1));
		ИмяМодуля = СтрРазделить(ИсходнаяСтрока, "(")[0];
		НомерСтроки =  СтрЗаменить(СтрРазделить(ИсходнаяСтрока, "(")[1], ")", "");
		
	Иначе
		
		ИсходнаяСтрока = ИнформацияОбОшибке.ИсходнаяСтрока;
		Описание = ИнформацияОбОшибке.Описание;
		ИмяМодуля = ИнформацияОбОшибке.ИмяМодуля;
		НомерСтроки = ИнформацияОбОшибке.НомерСтроки;
		
	КонецЕсли;
	
	//
	Ошибка = СтруктураДанныхОшибки();
	
	Ошибка.Событие = Событие;
	Ошибка.ОписаниеОшибки = ОписаниеОшибки;
	Ошибка.ИсходнаяСтрока = ИсходнаяСтрока;
	Ошибка.Описание = Описание;
	Ошибка.ИмяМодуля = ИмяМодуля;
	Ошибка.НомерСтроки = НомерСтроки;
	
	КонтекстЗамера.Ошибки.Вставить(Ошибка.Идентификатор, Ошибка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИнициализироватьЗамер(КонтекстЗапроса, ИдентификаторЗамера = Неопределено, ИдентификаторРодителя = Неопределено) Экспорт
	
	Если КонтекстЗапроса.ЭтоСлужебныйРесурс Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИдентификаторЗамера = Неопределено Тогда
		ИдентификаторЗамера = ПолучитьИД();
	КонецЕсли;
	
	КонтекстЗапроса.Вставить("ИдентификаторЗамера", ИдентификаторЗамера);
	КонтекстЗапроса.Вставить("ИдентификаторРодителя", ИдентификаторРодителя);
	
	//
	Результат = СформироватьДанныеКонтекстаЗамера(КонтекстЗапроса);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗавершитьЗамер(КонтекстЗамера, КонтекстОтвета) Экспорт
	
	Если КонтекстЗамера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	КонецЗамера = ТекущаяДатаUnixtime();
	
	КонтекстЗамера.КонецЗамера = КонецЗамера;
	КонтекстЗамера.Длительность = (КонецЗамера - КонтекстЗамера.НачалоЗамера) / 1000;
	
	//
	КонтекстЗамера.КодОтвета = КонтекстОтвета.Код;
	КонтекстЗамера.ЗаголовкиОтвета = КонтекстОтвета.Заголовки;
	КонтекстЗамера.ТелоОтвета = ?(ЗначениеЗаполнено(КонтекстОтвета.ТелоСтрока), КонтекстОтвета.ТелоСтрока, Неопределено);
	
	//
	TracingAPM.ВыгрузитьЗамерЗапроса(КонтекстЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеСтруктурДанных

Функция СформироватьДанныеКонтекстаЗамера(КонтекстЗапроса)
	
	ДанныеСистемнойИнформации = СформироватьДанныеСистемнойИнформации(КонтекстЗапроса);
	
	Система = ПолучитьИмяСистемы();
	Окружение = ПолучитьТипОкружения();
	ИмяСервиса = СтрЗаменить(КонтекстЗапроса.КлючСервиса, "/", "-");
	
	//
	Результат = СтруктураДанныхКонтекстаЗамера();
	
	Результат.ИдентификаторЗамера = КонтекстЗапроса.ИдентификаторЗамера;
	Результат.ИдентификаторРодителя = КонтекстЗапроса.ИдентификаторРодителя;
	Результат.СистемнаяИнформация = ДанныеСистемнойИнформации;
	Результат.ИсходныйЗапрос = КонтекстЗапроса.ИсходныйЗапрос;
	Результат.Система = Система;
	Результат.Окружение = Окружение;
	Результат.ИмяПубликации = КонтекстЗапроса.ИмяПубликации;
	Результат.КлючСервиса = КонтекстЗапроса.КлючСервиса;
	Результат.ИмяСервиса = ИмяСервиса;
	Результат.ИмяРесурса = КонтекстЗапроса.ОписаниеРесурса.ИмяРесурса;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеСистемнойИнформации(КонтекстЗапроса)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	//
	Результат = СтруктураДанныхСистемнаяИнформация();
	
	Результат.ПлатформаОС = СистемнаяИнформация.ВерсияОС;
	Результат.ТипПлатформыОС = Строка(СистемнаяИнформация.ТипПлатформы);
	Результат.ВерсияПлатформы1С = СистемнаяИнформация.ВерсияПриложения;
	Результат.Конфигурация = Метаданные.Имя;
	Результат.ВерсияКонфигурации = Метаданные.Версия;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеСтруктурыДанных

Функция СтруктураДанныхКонтекстаЗамера()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИдентификаторЗамера", Неопределено);
	Результат.Вставить("ИдентификаторРодителя", Неопределено);
	Результат.Вставить("ИдентификаторТранзакции", ПолучитьКороткийИД());
	Результат.Вставить("ИсходныйЗапрос", Новый Структура);
	Результат.Вставить("СистемнаяИнформация", Новый Структура);
	Результат.Вставить("НачалоЗамера", ТекущаяДатаUnixtime());
	Результат.Вставить("КонецЗамера", 0);
	Результат.Вставить("Длительность", 0);
	Результат.Вставить("Система", "");
	Результат.Вставить("Окружение", "");
	Результат.Вставить("ИмяПубликации", "");
	Результат.Вставить("КлючСервиса", "");
	Результат.Вставить("ИмяСервиса", "");
	Результат.Вставить("ИмяРесурса", "");
	Результат.Вставить("КодОтвета", 0);
	Результат.Вставить("ЗаголовкиОтвета", Неопределено);
	Результат.Вставить("ТелоОтвета", Неопределено);
	Результат.Вставить("Интервалы", Новый Соответствие);
	Результат.Вставить("ТекущийИнтервал", "");
	Результат.Вставить("Ошибки", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхСистемнаяИнформация()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПлатформаОС", "");
	Результат.Вставить("ТипПлатформыОС", "");
	Результат.Вставить("ВерсияПлатформы1С", "");
	Результат.Вставить("Конфигурация", "");
	Результат.Вставить("ВерсияКонфигурации", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхИнтервала()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", ПолучитьКороткийИД());
	Результат.Вставить("НачалоЗамера", ТекущаяДатаUnixtime());
	Результат.Вставить("КонецЗамера", 0);
	Результат.Вставить("Длительность", 0);
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Тип", "");
	Результат.Вставить("Подтип", "");
	Результат.Вставить("Действие", "");
	Результат.Вставить("Запрос", "");
	Результат.Вставить("Сервис", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхОшибки()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", ПолучитьИД());
	Результат.Вставить("ОтметкаВремени", ТекущаяДатаUnixtime());
	Результат.Вставить("Событие", "");
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ИмяМодуля", "");
	Результат.Вставить("НомерСтроки", "");
	Результат.Вставить("ИсходнаяСтрока", "");
	Результат.Вставить("Описание", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ТекущаяДатаUnixtime()
	
	РазницаМиллисекунд1С = 62135596800000;
	
	Возврат (ТекущаяУниверсальнаяДатаВМиллисекундах() - РазницаМиллисекунд1С) * 1000;
	
КонецФункции

Функция ПолучитьИД()
	Возврат СтрЗаменить(XMLСтрока(Новый УникальныйИдентификатор), "-", "");
КонецФункции

Функция ПолучитьКороткийИД()
	Возврат Прав(СтрЗаменить(XMLСтрока(Новый УникальныйИдентификатор), "-", ""), 16);
КонецФункции

Функция ПолучитьИмяСистемы()
	Возврат "test";
КонецФункции

Функция ПолучитьТипОкружения()
	Возврат "staging";
КонецФункции

#КонецОбласти

#КонецОбласти