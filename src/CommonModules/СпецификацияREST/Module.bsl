
#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьСпецификациюСервиса(ОписаниеСервиса, КорневойURL) Экспорт
	
	ОписаниеСервиса.Вставить("КорневойURL", КорневойURL);
	
	Результат = СтруктураДанныхСпецификация();
	
	ЗаполнитьСпецификацию(Результат, ОписаниеСервиса);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСистемныйОбъектПоОписанию(ТипДанных, ОпределениеОбъекта, ДанныеЗаполнения, ОпределенияОбъектов) Экспорт
	
	ОписаниеОпределенияОбъекта = ОпределенияОбъектов.Получить(ОпределениеОбъекта);
	
	ПростыеТипыДанных = ПростыеТипыДанных();
	
	Если ТипДанных = "Объект" Тогда
		
		Результат = Новый Структура;
		
		Для Каждого ИмяСвойства Из ОписаниеОпределенияОбъекта.ИменаСвойств Цикл
			
			ОписаниеСвойстваОбъекта = ОписаниеОпределенияОбъекта.СвойстваОбъекта.Получить(ИмяСвойства);
			
			СистемноеИмя = ОписаниеСвойстваОбъекта.СистемноеИмя;
			ТипДанныхСвойства = ОписаниеСвойстваОбъекта.ТипДанных;
			ОпределениеОбъектаСвойства = ОписаниеСвойстваОбъекта.ОпределениеОбъекта;
			
			Если Не ДанныеЗаполнения.Свойство(ИмяСвойства) Тогда
				ВызватьИсключение ИмяСвойства;
			КонецЕсли;
			
			ДанныеСвойства = ДанныеЗаполнения[ИмяСвойства];
			
			Если ПростыеТипыДанных.Найти(ТипДанныхСвойства) = Неопределено Тогда
				
				Объект = ПолучитьСистемныйОбъектПоОписанию(ТипДанныхСвойства, ОпределениеОбъектаСвойства, ДанныеСвойства, ОпределенияОбъектов);
				Результат.Вставить(СистемноеИмя, Объект);
				
			Иначе
				
				Результат.Вставить(СистемноеИмя, ДанныеСвойства);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипДанных = "Массив" Тогда
		
		Результат = Новый Массив;
		
		Для Каждого Элемент Из ДанныеЗаполнения Цикл
			
			Объект = ПолучитьСистемныйОбъектПоОписанию(ТипДанных, ОпределениеОбъекта, Элемент, ОпределенияОбъектов);
			
			Результат.Добавить(Объект);
			
		КонецЦикла;
		
	ИначеЕсли ТипДанных = "Перечисление" Тогда
		
		Результат = Неопределено;
		
		Для Каждого КЗ Из ОписаниеОпределенияОбъекта.СвойстваОбъекта Цикл
			
			ИмяСвойства = КЗ.Ключ;
			ОписаниеСвойстваОбъекта = КЗ.Значение;
			
			Если ИмяСвойства = ДанныеЗаполнения Тогда
				
				Результат = ОписаниеСвойстваОбъекта.ЗначениеПеречисления;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Результат = Неопределено Тогда
			ВызватьИсключение ДанныеЗаполнения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОбъектПоОписанию(ТипДанных, ОпределениеОбъекта, ДанныеЗаполнения, ОпределенияОбъектов) Экспорт
	
	ОписаниеОпределенияОбъекта = ОпределенияОбъектов.Получить(ОпределениеОбъекта);
	
	ПростыеТипыДанных = ПростыеТипыДанных();
	
	Если ТипДанных = "Объект" Тогда
		
		Результат = Новый Структура;
		
		Для Каждого ИмяСвойства Из ОписаниеОпределенияОбъекта.ИменаСвойств Цикл
			
			ОписаниеСвойстваОбъекта = ОписаниеОпределенияОбъекта.СвойстваОбъекта.Получить(ИмяСвойства);
			
			СистемноеИмя = ОписаниеСвойстваОбъекта.СистемноеИмя;
			ТипДанныхСвойства = ОписаниеСвойстваОбъекта.ТипДанных;
			ОпределениеОбъектаСвойства = ОписаниеСвойстваОбъекта.ОпределениеОбъекта;
			
			ДанныеСвойства = ДанныеЗаполнения[СистемноеИмя];
			
			Если ПростыеТипыДанных.Найти(ТипДанныхСвойства) = Неопределено Тогда
				
				Объект = ПолучитьОбъектПоОписанию(ТипДанныхСвойства, ОпределениеОбъектаСвойства, ДанныеСвойства, ОпределенияОбъектов);
				Результат.Вставить(ИмяСвойства, Объект);
				
			Иначе
				
				Результат.Вставить(ИмяСвойства, ДанныеСвойства);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипДанных = "Массив" Тогда
		
		Результат = Новый Массив;
		
		Для Каждого Элемент Из ДанныеЗаполнения Цикл
			
			Объект = ПолучитьОбъектПоОписанию("Объект", ОпределениеОбъекта, Элемент, ОпределенияОбъектов);
			
			Результат.Добавить(Объект);
			
		КонецЦикла;
		
	ИначеЕсли ТипДанных = "Перечисление" Тогда
		
		Результат = Неопределено;
		
		Для Каждого КЗ Из ОписаниеОпределенияОбъекта.СвойстваОбъекта Цикл
			
			ИмяСвойства = КЗ.Ключ;
			ОписаниеСвойстваОбъекта = КЗ.Значение;
			
			Если ОписаниеСвойстваОбъекта.ЗначениеПеречисления = ДанныеЗаполнения Тогда
				
				Результат = ИмяСвойства;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДоступныеТипыДанныхПараметра() Экспорт
	
	Результат = ПростыеТипыДанных();
	
	Результат.Добавить("Перечисление");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДоступныеТипыДанныхТела() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Пусто");
	Результат.Добавить("Строка");
	Результат.Добавить("Объект");
	Результат.Добавить("Массив");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДоступныеТипыДанныхСвойствОбъектов() Экспорт
	
	Результат = ПростыеТипыДанных();
	
	Результат.Добавить("Объект");
	Результат.Добавить("Массив");
	Результат.Добавить("Перечисление");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеСпецификации

Процедура ЗаполнитьСпецификацию(ДанныеСпецификации, ОписаниеСервиса)
	
	ЗаполнитьОбщуюИнформациюСпецификации(ДанныеСпецификации, ОписаниеСервиса);
	ЗаполнитьДанныеСервераСпецификации(ДанныеСпецификации, ОписаниеСервиса);
	ЗаполнитьГруппыРесурсовСпецификации(ДанныеСпецификации, ОписаниеСервиса);
	ЗаполнитьРесурсыСпецификации(ДанныеСпецификации, ОписаниеСервиса);
	ЗаполнитьКомпонентыСпецификации(ДанныеСпецификации, ОписаниеСервиса);
	
	ОчиститьПустыеЭлементыКоллекции(ДанныеСпецификации, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОбщуюИнформациюСпецификации(ДанныеСпецификации, ОписаниеСервиса)
	
	Перем СистемноеИмя, КраткоеОписание;
	
	ОписаниеСервиса.Свойство("СистемноеИмя"		, СистемноеИмя);
	ОписаниеСервиса.Свойство("КраткоеОписание"	, КраткоеОписание);
	
	//
	ОбщееИнфо = СтруктураДанныхОбщееИнфо();
	
	ОбщееИнфо["title"] = "Спецификация сервиса 1С: " + СистемноеИмя;
	ОбщееИнфо["description"] = КраткоеОписание;
	
	ДанныеСпецификации["info"] = ОбщееИнфо;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСервераСпецификации(ДанныеСпецификации, ОписаниеСервиса)
	
	Перем КорневойURL;
	
	ОписаниеСервиса.Свойство("КорневойURL", КорневойURL);
	
	//
	ДанныеСервера = СтруктураДанныхСервер();
	
	ДанныеСервера["url"] = КорневойURL;
	ДанныеСервера["description"] = "Текущая система";
	
	ДанныеСпецификации["servers"].Добавить(ДанныеСервера);
	
КонецПроцедуры

Процедура ЗаполнитьГруппыРесурсовСпецификации(ДанныеСпецификации, ОписаниеСервиса)
	
	Перем ГруппыРесурсов;
	
	ОписаниеСервиса.Свойство("ГруппыРесурсов", ГруппыРесурсов);
	
	//
	Для Каждого ОписаниеГруппыРесурсов Из ГруппыРесурсов Цикл
		
		ДанныеГруппыРесурсов = СформироватьДанныеГруппыРесурсов(ОписаниеГруппыРесурсов);
		
		ДанныеСпецификации["tags"].Добавить(ДанныеГруппыРесурсов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРесурсыСпецификации(ДанныеСпецификации, ОписаниеСервиса)
	
	Перем Ресурсы, ОпределенияОбъектов;
	
	ОписаниеСервиса.Свойство("Ресурсы"				, Ресурсы);
	ОписаниеСервиса.Свойство("ОпределенияОбъектов"	, ОпределенияОбъектов);
	
	//
	Для Каждого КЗ Из Ресурсы Цикл
		
		ПутьРесурса = КЗ.Ключ;
		ОписаниеРесурса = КЗ.Значение;
		
		Если ОбщегоНазначенияREST.ЭтоСлужебныйРесурс(ПутьРесурса) Тогда
			Продолжить;
		КонецЕсли;
		
		Ресурс = Новый Соответствие;
		
		Для Каждого КЗ Из ОписаниеРесурса.Методы Цикл
			
			ОписаниеМетода = КЗ.Значение;
			КлючМетода = НРег(Строка(ОписаниеМетода.МетодЗапроса));
			
			ДанныеМетодаРесурса = СформироватьДанныеМетодаРесурса(ОписаниеРесурса, ОписаниеМетода, ОпределенияОбъектов);
			
			Ресурс.Вставить(КлючМетода, ДанныеМетодаРесурса);
			
		КонецЦикла;
		
		ДанныеСпецификации["paths"].Вставить(ПутьРесурса, Ресурс);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКомпонентыСпецификации(ДанныеСпецификации, ОписаниеСервиса)
	
	Перем ОпределенияОбъектов;
	
	ОписаниеСервиса.Свойство("ОпределенияОбъектов", ОпределенияОбъектов);
	
	//
	ДанныеКомпонентов = СформироватьДанныеКомпонентов(ОписаниеСервиса, ОпределенияОбъектов);
	
	ДанныеСпецификации["components"] = ДанныеКомпонентов;
	
	КонецПроцедуры

#КонецОбласти

#Область ФормированиеСтруктурДанных

Функция СформироватьДанныеГруппыРесурсов(ОписаниеГруппыРесурсов)
	
	Перем Имя, КраткоеОписание;
	
	ОписаниеГруппыРесурсов.Свойство("Имя"				, Имя);
	ОписаниеГруппыРесурсов.Свойство("КраткоеОписание"	, КраткоеОписание);
	
	//
	Результат = СтруктураДанныхГруппаРесурсов();
	
	Результат["name"] = Имя;
	Результат["description"] = КраткоеОписание;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеМетодаРесурса(ОписаниеРесурса, ОписаниеМетода, ОпределенияОбъектов)
	
	Перем ИмяГруппы, ПараметрыURL;
	Перем КраткоеОписание, ЕстьАвторизация, ТипДанных, Заголовки, Параметры, Ответы;
	
	ОписаниеРесурса.Свойство("ИмяГруппы"	, ИмяГруппы);
	ОписаниеРесурса.Свойство("ПараметрыURL"	, ПараметрыURL);
	
	ОписаниеМетода.Свойство("КраткоеОписание"	, КраткоеОписание);
	ОписаниеМетода.Свойство("ЕстьАвторизация"	, ЕстьАвторизация);
	ОписаниеМетода.Свойство("ТипДанных"			, ТипДанных);
	ОписаниеМетода.Свойство("Заголовки"			, Заголовки);
	ОписаниеМетода.Свойство("Параметры"			, Параметры);
	ОписаниеМетода.Свойство("Ответы"			, Ответы);
	
	//
	Результат = СтруктураДанныхМетодРесурса();
	
	Результат["summary"] = КраткоеОписание;
	
	// Укажем группу при наличии
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		Результат["tags"].Добавить(ИмяГруппы);
	КонецЕсли;
	
	// Укажем необходимость авторизации
	Если ЕстьАвторизация Тогда
		Результат["security"].Добавить(Новый Структура("BasicAuth", Новый Массив));
	КонецЕсли;
	
	// Укажем описание тела запроса
	Если Не ТипДанных = "Пусто" Тогда
		
		ДанныеТелаЗапроса = СформироватьДанныеТелаЗапроса(ОписаниеМетода, ОпределенияОбъектов);
		
		Результат["requestBody"] = ДанныеТелаЗапроса;
		
	КонецЕсли;
	
	// Укажем параметры URL
	Для Каждого КЗ Из ПараметрыURL Цикл
		
		ОписаниеПараметраЗапроса = КЗ.Значение;
		ОписаниеПараметраЗапроса.Вставить("Расположение", "path");
		
		ДанныеПараметраЗапроса = СформироватьДанныеПараметраЗапроса(ОписаниеПараметраЗапроса, ОпределенияОбъектов);
		
		Результат["parameters"].Добавить(ДанныеПараметраЗапроса);
		
	КонецЦикла;
	
	// Укажем заголовки запроса
	Для Каждого КЗ Из Заголовки Цикл
		
		ОписаниеПараметраЗапроса = КЗ.Значение;
		ОписаниеПараметраЗапроса.Вставить("Расположение", "header");
		
		ДанныеПараметраЗапроса = СформироватьДанныеПараметраЗапроса(ОписаниеПараметраЗапроса, ОпределенияОбъектов);
		
		Результат["parameters"].Добавить(ДанныеПараметраЗапроса);
		
	КонецЦикла;
	
	// Укажем параметры запроса
	Для Каждого КЗ Из Параметры Цикл
		
		ОписаниеПараметраЗапроса = КЗ.Значение;
		ОписаниеПараметраЗапроса.Вставить("Расположение", "query");
		
		ДанныеПараметраЗапроса = СформироватьДанныеПараметраЗапроса(ОписаниеПараметраЗапроса, ОпределенияОбъектов);
		
		Результат["parameters"].Добавить(ДанныеПараметраЗапроса);
		
	КонецЦикла;
	
	// Укажем возможные ответы
	Для Каждого КЗ Из Ответы Цикл
		
		ОписаниеОтвета = КЗ.Значение;
		КлючОтвета = Строка(ОписаниеОтвета.КодОтвета);
		
		ДанныеОтветаЗапроса = СформироватьДанныеОтветаЗапроса(ОписаниеОтвета, ОпределенияОбъектов);
		
		Результат["responses"].Вставить(КлючОтвета, ДанныеОтветаЗапроса);
		
	КонецЦикла;
	
	ОчиститьПустыеЭлементыКоллекции(Результат, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеТелаЗапроса(ОписаниеМетода, ОпределенияОбъектов)
	
	СхемаДанных = СформироватьДанныеСхемыДанных(ОписаниеМетода, ОпределенияОбъектов);
	ТипКонтента = ОпределитьТипКонтента(СхемаДанных);
	
	//
	Результат = СтруктураДанныхТелоЗапроса();
	
	Результат["required"] = Истина;
	Результат["content"].Вставить(ТипКонтента, Новый Структура("schema", СхемаДанных));
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеПараметраЗапроса(ОписаниеПараметраЗапроса, ОпределенияОбъектов)
	
	Перем ИмяПараметра, Расположение, КраткоеОписание, Обязательный;
	
	ОписаниеПараметраЗапроса.Свойство("ИмяПараметра"	, ИмяПараметра);
	ОписаниеПараметраЗапроса.Свойство("Расположение"	, Расположение);
	ОписаниеПараметраЗапроса.Свойство("КраткоеОписание"	, КраткоеОписание);
	ОписаниеПараметраЗапроса.Свойство("Обязательный"	, Обязательный);
	
	//
	СхемаДанных = СформироватьДанныеСхемыДанных(ОписаниеПараметраЗапроса, ОпределенияОбъектов);
	
	Результат = СтруктураДанныхПараметрЗапроса();
	
	Результат.name = ИмяПараметра;
	Результат.in = Расположение;
	Результат.description = КраткоеОписание;
	Результат.required = Обязательный;
	Результат.schema = СхемаДанных;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеОтветаЗапроса(ОписаниеОтвета, ОпределенияОбъектов)
	
	Перем СтандартныйОтвет, КраткоеОписание;
	
	ОписаниеОтвета.Свойство("СтандартныйОтвет"	, СтандартныйОтвет);
	ОписаниеОтвета.Свойство("КраткоеОписание"	, КраткоеОписание);
	
	//
	Результат = СтруктураДанныхОтветЗапроса();
	
	Если ЗначениеЗаполнено(СтандартныйОтвет) Тогда
		
		Результат["$ref"] = "#/components/responses/" + СтандартныйОтвет;
		
	Иначе
		
		СхемаДанных = СформироватьДанныеСхемыДанных(ОписаниеОтвета, ОпределенияОбъектов);
		ТипКонтента = ОпределитьТипКонтента(СхемаДанных);
		
		Результат["description"] = КраткоеОписание;
		Результат["content"].Вставить(ТипКонтента, Новый Структура("schema", СхемаДанных));
		
	КонецЕсли;
	
	ОчиститьПустыеЭлементыКоллекции(Результат, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеКомпонентов(ОписаниеСервиса, ОпределенияОбъектов)
	
	Перем ЕстьАвторизация, СтандартныеОтветы;
	
	ОписаниеСервиса.Свойство("ЕстьАвторизация"	, ЕстьАвторизация);
	ОписаниеСервиса.Свойство("СтандартныеОтветы", СтандартныеОтветы);
	
	//
	Результат = СтруктураДанныхКомпоненты();
	
	// Указать наличие авторизации
	Если ЕстьАвторизация Тогда
		
		ДанныеАвторизации = СтруктураДанныхАвторизация();
		
		Результат["securitySchemes"].Вставить("BasicAuth", ДанныеАвторизации);
		
	КонецЕсли;
	
	// Заполнить описания определений объектов
	Для Каждого КЗ Из ОпределенияОбъектов Цикл
		
		ОписаниеОпределенияОбъекта = КЗ.Значение;
		КлючОпределения = XMLСтрока(ОписаниеОпределенияОбъекта.Ссылка);
		
		ДанныеОпределенияОбъекта = СформироватьДанныеОпределенияОбъекта(ОписаниеОпределенияОбъекта, ОпределенияОбъектов);
		
		Результат["schemas"].Вставить(КлючОпределения, ДанныеОпределенияОбъекта);
		
	КонецЦикла;
	
	// Заполнить описание стандартных ответов
	Для Каждого КЗ Из СтандартныеОтветы Цикл
		
		ИмяОтвета = КЗ.Ключ;
		ОписаниеОтвета = КЗ.Значение;
		
		ДанныеОтветаЗапроса = СформироватьДанныеОтветаЗапроса(ОписаниеОтвета, ОпределенияОбъектов);
		
		Результат["responses"].Вставить(ИмяОтвета, ДанныеОтветаЗапроса);
		
	КонецЦикла;
	
	ОчиститьПустыеЭлементыКоллекции(Результат, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеОпределенияОбъекта(ОписаниеОпределенияОбъекта, ОпределенияОбъектов)
	
	Перем Наименование, КраткоеОписание, ИменаСвойств, СвойстваОбъекта;
	
	ОписаниеОпределенияОбъекта.Свойство("Наименование"		, Наименование);
	ОписаниеОпределенияОбъекта.Свойство("КраткоеОписание"	, КраткоеОписание);
	ОписаниеОпределенияОбъекта.Свойство("ИменаСвойств"		, ИменаСвойств);
	ОписаниеОпределенияОбъекта.Свойство("СвойстваОбъекта"	, СвойстваОбъекта);
	
	//
	Результат = СтруктураДанныхОпределениеОбъекта();
	
	Результат["type"] = "object";
	Результат["title"] = Наименование;
	Результат["description"] = КраткоеОписание;
	
	// Заполнить описания свойств объекта
	Для Каждого ИмяСвойства Из ИменаСвойств Цикл
		
		ОписаниеСвойстваОбъекта = СвойстваОбъекта.Получить(ИмяСвойства);
		ИмяСвойства = ОписаниеСвойстваОбъекта.ИмяСвойства;
		
		СхемаДанных = СформироватьДанныеСхемыДанных(ОписаниеСвойстваОбъекта, ОпределенияОбъектов);
		
		Результат.properties.Вставить(ИмяСвойства, СхемаДанных);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеСхемыДанных(ОписаниеСхемыДанных, ОпределенияОбъектов)
	
	Перем ТипДанных, ОпределениеОбъекта, КраткоеОписание;
	
	Результат = СтруктураДанныхСхемаДанных();
	
	ОписаниеСхемыДанных.Свойство("ТипДанных", ТипДанных);
	ОписаниеСхемыДанных.Свойство("ОпределениеОбъекта", ОпределениеОбъекта);
	ОписаниеСхемыДанных.Свойство("КраткоеОписание", КраткоеОписание);
	
	ПростыеТипыДанных = ПростыеТипыДанных();
	Спецификация = ПолучитьСоответствиеТипаДанныхСпецификации(ТипДанных);
	
	//
	Результат["title"] = КраткоеОписание;
	
	Если ПростыеТипыДанных.Найти(ТипДанных) <> Неопределено Тогда
		
		Результат["type"] = Спецификация.Тип;
		Результат["format"] = Спецификация.Формат;
		
	Иначе
		
		Если ТипДанных = "Объект" Тогда
			
			Результат["$ref"] = "#/components/schemas/" + XMLСтрока(ОпределениеОбъекта);
			
		ИначеЕсли ТипДанных = "Массив" Тогда
			
			Результат["type"] = Спецификация.Тип;
			
			Результат["items"] = Новый Соответствие;
			Результат["items"].Вставить("$ref", "#/components/schemas/" + XMLСтрока(ОпределениеОбъекта));
			
		ИначеЕсли ТипДанных = "Перечисление" Тогда
			
			Результат["description"] = "Значение свойств:";
			Результат["type"] = Спецификация.Тип;
			Результат["enum"] = Новый Массив;
			
			ОписаниеПеречисления = ОпределенияОбъектов.Получить(ОпределениеОбъекта);
			
			Для Каждого ИмяСвойства Из ОписаниеПеречисления.ИменаСвойств Цикл
				
				ОписаниеСвойства = ОписаниеПеречисления.СвойстваОбъекта.Получить(ИмяСвойства);
				
				КраткоеОписаниеСвойства = " * " + ИмяСвойства + " - " + ОписаниеСвойства.КраткоеОписание;
				
				Результат["enum"].Добавить(ИмяСвойства);
				Результат["description"] = Результат["description"] + Символы.ПС + КраткоеОписаниеСвойства;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьПустыеЭлементыКоллекции(Результат, Истина);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеСтруктурыДанных

Функция СтруктураДанныхСпецификация()
	
	Результат = Новый Структура;
	
	Результат.Вставить("openapi", "3.0.2");
	Результат.Вставить("info", Неопределено);
	Результат.Вставить("servers", Новый Массив);
	Результат.Вставить("tags", Новый Массив);
	Результат.Вставить("paths", Новый Соответствие);
	Результат.Вставить("components", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхОбщееИнфо()
	
	Результат = Новый Структура;
	
	Результат.Вставить("title", "");
	Результат.Вставить("description", "");
	Результат.Вставить("version", "1.0.0");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхСервер()
	
	Результат = Новый Структура;
	
	Результат.Вставить("url", "");
	Результат.Вставить("description", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхКомпоненты()
	
	Результат = Новый Структура;
	
	Результат.Вставить("schemas", Новый Соответствие);
	Результат.Вставить("responses", Новый Соответствие);
	Результат.Вставить("securitySchemes", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхГруппаРесурсов()
	
	Результат = Новый Структура;
	
	Результат.Вставить("name", "");
	Результат.Вставить("description", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхМетодРесурса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("tags", Новый Массив);
	Результат.Вставить("summary", "");
	Результат.Вставить("description", "");
	Результат.Вставить("requestBody", Неопределено);
	Результат.Вставить("parameters", Новый Массив);
	Результат.Вставить("security", Новый Массив);
	Результат.Вставить("responses", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхТелоЗапроса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("description", "");
	Результат.Вставить("required", Ложь);
	Результат.Вставить("content", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхПараметрЗапроса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("name", "");
	Результат.Вставить("in", "");
	Результат.Вставить("description", "");
	Результат.Вставить("required", Ложь);;
	Результат.Вставить("schema", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхОтветЗапроса()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("$ref", Неопределено);
	Результат.Вставить("description", Неопределено);
	Результат.Вставить("content", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхСхемаДанных()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("description", Неопределено);
	Результат.Вставить("type", Неопределено);
	Результат.Вставить("format", Неопределено);
	Результат.Вставить("$ref", Неопределено);
	Результат.Вставить("items", Неопределено);
	Результат.Вставить("enum", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхАвторизация()
	
	Результат = Новый Структура;
	
	Результат.Вставить("type", "http");
	Результат.Вставить("scheme", "basic");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхОпределениеОбъекта()
	
	Результат = Новый Структура;
	
	Результат.Вставить("type", "");
	Результат.Вставить("title", "");
	Результат.Вставить("description", "");
	Результат.Вставить("properties", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолучитьСоответствиеТипаДанныхСпецификации(ТипДанных)
	
	Соответствие = Новый Соответствие;
	
	//
	Спецификация = Новый Структура("Тип, Формат", "string", Неопределено);
	Соответствие.Вставить("Строка", Спецификация);
	
	//
	Спецификация = Новый Структура("Тип, Формат", "integer", Неопределено);
	Соответствие.Вставить("ЦелоеЧисло", Спецификация);
	
	//
	Спецификация = Новый Структура("Тип, Формат", "number", "float");
	Соответствие.Вставить("НецелоеЧисло", Спецификация);
	
	//
	Спецификация = Новый Структура("Тип, Формат", "boolean", Неопределено);
	Соответствие.Вставить("Булево", Спецификация);
	
	//
	Спецификация = Новый Структура("Тип, Формат", "string", "date");
	Соответствие.Вставить("Дата", Спецификация);
	
	//
	Спецификация = Новый Структура("Тип, Формат", "string", "date-time");
	Соответствие.Вставить("ДатаВремя", Спецификация);
	
	//
	Спецификация = Новый Структура("Тип, Формат", "string", "uuid");
	Соответствие.Вставить("УИД", Спецификация);
	
	//
	Спецификация = Новый Структура("Тип, Формат", "object", Неопределено);
	Соответствие.Вставить("Объект", Спецификация);
	
	//
	Спецификация = Новый Структура("Тип, Формат", "array", Неопределено);
	Соответствие.Вставить("Массив", Спецификация);
	
	//
	Спецификация = Новый Структура("Тип, Формат", "string", Неопределено);
	Соответствие.Вставить("Перечисление", Спецификация);
	
	Возврат Соответствие.Получить(ТипДанных);
	
КонецФункции

Функция ОпределитьТипКонтента(Схема)
	
	Если Схема.Получить("type") = Неопределено
		Или Схема.Получить("type") = "array" Тогда
		
		Результат = "application/json";
		
	Иначе
		
		Результат = "text/plain";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьПустыеЭлементыКоллекции(Коллекция, ВключаяПустыеЗначенияТипаКоллекция = Ложь)
	
	КлючиДляУдаления = Новый Массив;
	
	Для Каждого КЗ Из Коллекция Цикл
		
		Если КЗ.Значение = Неопределено Тогда
			КлючиДляУдаления.Добавить(КЗ.Ключ);
		ИначеЕсли ВключаяПустыеЗначенияТипаКоллекция Тогда
			
			ЭтоКоллекция = (ТипЗнч(КЗ.Значение) = Тип("Массив") Или ТипЗнч(КЗ.Значение) = Тип("Соответствие"));
			
			Если ЭтоКоллекция И Не КЗ.Значение.Количество() Тогда
				КлючиДляУдаления.Добавить(КЗ.Ключ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Ключ Из КлючиДляУдаления Цикл
		Коллекция.Удалить(Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция ПростыеТипыДанных()
	
	Результат = Новый Массив;
	
	Результат.Добавить("Строка");
	Результат.Добавить("ЦелоеЧисло");
	Результат.Добавить("НецелоеЧисло");
	Результат.Добавить("Булево");
	Результат.Добавить("Дата");
	Результат.Добавить("ДатаВремя");
	Результат.Добавить("УИД");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти