
#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьОписанияСервисов() Экспорт
	
	Результат = Новый Соответствие;
	
	ПользовательскиеНастройки = ПолучитьПользовательскиеНастройки();
	
	Для Каждого ДанныеСервиса Из ПользовательскиеНастройки.Сервисы Цикл
		
		КлючСервиса = ДанныеСервиса.КорневойURL + ?(ДанныеСервиса.Версия = 0, "", "/v" + ДанныеСервиса.Версия);
		
		ОписаниеСервиса = СтруктураДанныхСервис();
		
		ЗаполнитьОписаниеСервиса(ОписаниеСервиса, ДанныеСервиса, ПользовательскиеНастройки);
		
		Результат.Вставить(КлючСервиса, ОписаниеСервиса);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОписаниеРесурса(ОписаниеСервиса, ВызываемыйРесурс) Экспорт
	
	// Попытка найти не параметризированный URL
	Результат = ОписаниеСервиса.Ресурсы.Получить(ВызываемыйРесурс);
	
	// Попытка найти параметризированный URL
	Если Результат = Неопределено Тогда
		
		СоставURLЗапроса = ОбщегоНазначенияREST.РазделитьURL(ВызываемыйРесурс);
		
		Для Каждого КЗ Из ОписаниеСервиса.Ресурсы Цикл
			
			ПутьРесурса = КЗ.Ключ;
			
			Если ОбщегоНазначенияREST.ЭтоСлужебныйРесурс(ПутьРесурса) Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеРесурса = КЗ.Значение;
			
			// Пропуск не параметризированных
			Если НЕ ОписаниеРесурса.ЕстьПараметрыURL Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверка на совпадение количества элементов состава
			СоставURLРесурса = ОбщегоНазначенияREST.РазделитьURL(ПутьРесурса);
			
			Если СоставURLЗапроса.Количество() <> СоставURLРесурса.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверка на поименное совпадение элементов состава
			ЕстьСовпадение = Истина;
			
			Для ии = 0 По СоставURLЗапроса.Количество() - 1 Цикл
				
				ЭлементЗапроса = СоставURLЗапроса[ии];
				ЭлементРесурса = СоставURLРесурса[ии];
				
				Если ЭлементЗапроса <> ЭлементРесурса И ОписаниеРесурса.ПараметрыURL.Получить(ии) = Неопределено Тогда
					
					ЕстьСовпадение = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			//
			Если ЕстьСовпадение Тогда
				
				Результат = ОписаниеРесурса;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПользовательскиеНастройки()
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СервисыREST.Ссылка КАК Ссылка,
	|	СервисыREST.Код КАК КорневойURL,
	|	СервисыREST.Версия КАК Версия,
	|	СервисыREST.Наименование КАК КраткоеОписание,
	|	СервисыREST.СистемноеИмя КАК СистемноеИмя
	|ИЗ
	|	Справочник.СервисыREST КАК СервисыREST
	|ГДЕ
	|	СервисыREST.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РесурсыREST.Владелец КАК Владелец,
	|	РесурсыREST.Ссылка КАК Ссылка,
	|	РесурсыREST.Код КАК Имя,
	|	РесурсыREST.ОписаниеГруппы КАК КраткоеОписание
	|ИЗ
	|	Справочник.РесурсыREST КАК РесурсыREST
	|ГДЕ
	|	РесурсыREST.ПометкаУдаления = ЛОЖЬ
	|	И РесурсыREST.ЭтоГруппа = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РесурсыREST.Владелец КАК Владелец,
	|	РесурсыREST.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(РесурсыREST.Родитель.Код, """") КАК ИмяГруппы,
	|	РесурсыREST.Код КАК ИмяРесурса,
	|	РесурсыREST.ЕстьПараметрыURL КАК ЕстьПараметрыURL
	|ИЗ
	|	Справочник.РесурсыREST КАК РесурсыREST
	|ГДЕ
	|	РесурсыREST.ПометкаУдаления = ЛОЖЬ
	|	И РесурсыREST.ЭтоГруппа = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РесурсыRESTПараметрыURL.Ссылка КАК Владелец,
	|	РесурсыRESTПараметрыURL.ПорядковыйНомер КАК ПорядковыйНомер,
	|	РесурсыRESTПараметрыURL.ИмяПараметра КАК ИмяПараметра,
	|	ИСТИНА КАК Обязательный,
	|	РесурсыRESTПараметрыURL.КраткоеОписание КАК КраткоеОписание,
	|	РесурсыRESTПараметрыURL.ТипДанных КАК ТипДанных
	|ИЗ
	|	Справочник.РесурсыREST.ПараметрыURL КАК РесурсыRESTПараметрыURL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МетодыРесурсовREST.Владелец КАК Владелец,
	|	МетодыРесурсовREST.Ссылка КАК Ссылка,
	|	МетодыРесурсовREST.МетодЗапроса КАК МетодЗапроса,
	|	МетодыРесурсовREST.Обработчик КАК Обработчик,
	|	МетодыРесурсовREST.Наименование КАК КраткоеОписание,
	|	МетодыРесурсовREST.ЕстьАвторизация КАК ЕстьАвторизация,
	|	МетодыРесурсовREST.ТипДанных КАК ТипДанных,
	|	МетодыРесурсовREST.ОпределениеОбъекта КАК ОпределениеОбъекта
	|ИЗ
	|	Справочник.МетодыРесурсовREST КАК МетодыРесурсовREST
	|ГДЕ
	|	МетодыРесурсовREST.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МетодыРесурсовRESTДоступ.Ссылка КАК Владелец,
	|	МетодыРесурсовRESTДоступ.ИмяПользователя КАК ИмяПользователя
	|ИЗ
	|	Справочник.МетодыРесурсовREST.Доступ КАК МетодыРесурсовRESTДоступ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МетодыРесурсовRESTЗаголовкиЗапроса.Ссылка КАК Владелец,
	|	МетодыРесурсовRESTЗаголовкиЗапроса.ИмяПараметра КАК ИмяПараметра,
	|	МетодыРесурсовRESTЗаголовкиЗапроса.Обязательный КАК Обязательный,
	|	МетодыРесурсовRESTЗаголовкиЗапроса.КраткоеОписание КАК КраткоеОписание,
	|	МетодыРесурсовRESTЗаголовкиЗапроса.ТипДанных КАК ТипДанных,
	|	МетодыРесурсовRESTЗаголовкиЗапроса.ОпределениеОбъекта КАК ОпределениеОбъекта
	|ИЗ
	|	Справочник.МетодыРесурсовREST.ЗаголовкиЗапроса КАК МетодыРесурсовRESTЗаголовкиЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МетодыРесурсовRESTПараметрыЗапроса.Ссылка КАК Владелец,
	|	МетодыРесурсовRESTПараметрыЗапроса.ИмяПараметра КАК ИмяПараметра,
	|	МетодыРесурсовRESTПараметрыЗапроса.Обязательный КАК Обязательный,
	|	МетодыРесурсовRESTПараметрыЗапроса.КраткоеОписание КАК КраткоеОписание,
	|	МетодыРесурсовRESTПараметрыЗапроса.ТипДанных КАК ТипДанных,
	|	МетодыРесурсовRESTПараметрыЗапроса.ОпределениеОбъекта КАК ОпределениеОбъекта
	|ИЗ
	|	Справочник.МетодыРесурсовREST.ПараметрыЗапроса КАК МетодыРесурсовRESTПараметрыЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МетодыРесурсовRESTЗаголовкиОтвета.Ссылка КАК Владелец,
	|	МетодыРесурсовRESTЗаголовкиОтвета.ИмяПараметра КАК ИмяПараметра,
	|	МетодыРесурсовRESTЗаголовкиОтвета.КраткоеОписание КАК КраткоеОписание,
	|	МетодыРесурсовRESTЗаголовкиОтвета.ТипДанных КАК ТипДанных
	|ИЗ
	|	Справочник.МетодыРесурсовREST.ЗаголовкиОтвета КАК МетодыРесурсовRESTЗаголовкиОтвета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МетодыРесурсовRESTВозвращаемыеОтветы.Ссылка КАК Владелец,
	|	МетодыРесурсовRESTВозвращаемыеОтветы.ТипОтвета КАК ТипОтвета,
	|	МетодыРесурсовRESTВозвращаемыеОтветы.КодОтвета КАК КодОтвета,
	|	МетодыРесурсовRESTВозвращаемыеОтветы.КраткоеОписание КАК КраткоеОписание,
	|	МетодыРесурсовRESTВозвращаемыеОтветы.ТипДанных КАК ТипДанных,
	|	МетодыРесурсовRESTВозвращаемыеОтветы.ОпределениеОбъекта КАК ОпределениеОбъекта
	|ИЗ
	|	Справочник.МетодыРесурсовREST.ВозвращаемыеОтветы КАК МетодыРесурсовRESTВозвращаемыеОтветы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурыДанныхREST.Ссылка КАК Ссылка,
	|	СтруктурыДанныхREST.Наименование КАК Наименование,
	|	СтруктурыДанныхREST.Тип КАК Тип,
	|	СтруктурыДанныхREST.КраткоеОписание КАК КраткоеОписание
	|ИЗ
	|	Справочник.СтруктурыДанныхREST КАК СтруктурыДанныхREST
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурыДанныхRESTСвойстваОбъекта.Ссылка КАК Владелец,
	|	СтруктурыДанныхRESTСвойстваОбъекта.НомерСтроки КАК НомерСтроки,
	|	СтруктурыДанныхRESTСвойстваОбъекта.СистемноеИмя КАК СистемноеИмя,
	|	СтруктурыДанныхRESTСвойстваОбъекта.ИмяСвойства КАК ИмяСвойства,
	|	СтруктурыДанныхRESTСвойстваОбъекта.КраткоеОписание КАК КраткоеОписание,
	|	СтруктурыДанныхRESTСвойстваОбъекта.ТипДанных КАК ТипДанных,
	|	СтруктурыДанныхRESTСвойстваОбъекта.ОпределениеОбъекта КАК ОпределениеОбъекта,
	|	СтруктурыДанныхRESTСвойстваОбъекта.ЗначениеПеречисления КАК ЗначениеПеречисления
	|ИЗ
	|	Справочник.СтруктурыДанныхREST.СвойстваОбъекта КАК СтруктурыДанныхRESTСвойстваОбъекта";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Результат.Вставить("Сервисы"			, Пакет[0].Выгрузить());
	Результат.Вставить("ГруппыРесурсов"		, Пакет[1].Выгрузить());
	Результат.Вставить("Ресурсы"			, Пакет[2].Выгрузить());
	Результат.Вставить("ПараметрыURL"		, Пакет[3].Выгрузить());
	Результат.Вставить("Методы"				, Пакет[4].Выгрузить());
	Результат.Вставить("Доступы"			, Пакет[5].Выгрузить());
	Результат.Вставить("ЗаголовкиЗапроса"	, Пакет[6].Выгрузить());
	Результат.Вставить("ПараметрыЗапроса"	, Пакет[7].Выгрузить());
	Результат.Вставить("ЗаголовкиОтвета"	, Пакет[8].Выгрузить());
	Результат.Вставить("Ответы"				, Пакет[9].Выгрузить());
	Результат.Вставить("ОпределенияОбъектов", Пакет[10].Выгрузить());
	Результат.Вставить("СвойстваОбъектов"	, Пакет[11].Выгрузить());
	
	Возврат Результат
	
КонецФункции

#Область ЗаполнениеОписаниСервиса

Процедура ЗаполнитьОписаниеСервиса(ОписаниеСервиса, ДанныеСервиса, ПользовательскиеНастройки)
	
	ЗаполнитьОбщееОписаниеСервиса(ОписаниеСервиса, ДанныеСервиса);
	ЗаполнитьОписаниеГруппРесурсовСервиса(ОписаниеСервиса, ПользовательскиеНастройки);
	ЗаполнитьОписаниеРесурсовСервиса(ОписаниеСервиса, ПользовательскиеНастройки);
	ЗаполнитьОписаниеОпределенийОбъектов(ОписаниеСервиса, ПользовательскиеНастройки);
	
КонецПроцедуры

Процедура ЗаполнитьОбщееОписаниеСервиса(ОписаниеСервиса, ДанныеСервиса)
	
	ЗаполнитьЗначенияСвойств(ОписаниеСервиса, ДанныеСервиса);
	
	// Добавить встроенные методы документации
	ДобавитьВОписаниеСервисаМетодДокументации(ОписаниеСервиса);
	ДобавитьВОписаниеСервисаМетодИконка16Документации(ОписаниеСервиса);
	ДобавитьВОписаниеСервисаМетодИконка32Документации(ОписаниеСервиса);
	ДобавитьВОписаниеСервисаМетодСтилейДокументации(ОписаниеСервиса);
	ДобавитьВОписаниеСервисаМетодСкриптовДокументации(ОписаниеСервиса);
	ДобавитьВОписаниеСервисаМетодСпецификации(ОписаниеСервиса);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеГруппРесурсовСервиса(ОписаниеСервиса, ПользовательскиеНастройки)
	
	ГруппыРесурсов = ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, "ГруппыРесурсов", ОписаниеСервиса.Ссылка);
	
	Для Каждого ДанныеГруппыРесурсов Из ГруппыРесурсов Цикл
		
		ОписаниеГруппыРесурсов = СформироватьОписаниеГруппыРесурсов(ДанныеГруппыРесурсов);
		
		ОписаниеСервиса.ГруппыРесурсов.Добавить(ОписаниеГруппыРесурсов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРесурсовСервиса(ОписаниеСервиса, ПользовательскиеНастройки)
	
	Ресурсы = ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, "Ресурсы", ОписаниеСервиса.Ссылка);
	
	Для Каждого ДанныеРесурса Из Ресурсы Цикл
		
		ОписаниеРесурса = СформироватьОписаниеРесурса(ДанныеРесурса, ПользовательскиеНастройки);
		
		Для Каждого КЗ Из ОписаниеРесурса.Методы Цикл
			
			ОписаниеМетода = КЗ.Значение;
			
			// Обновить наличие авторизации
			Если ОписаниеМетода.ЕстьАвторизация Тогда
				ОписаниеСервиса.ЕстьАвторизация = Истина;
			КонецЕсли;
			
			// Обновить список используемых определений объектов
			Если ЗначениеЗаполнено(ОписаниеМетода.ОпределениеОбъекта) Тогда
				ОписаниеСервиса.ОпределенияОбъектов.Вставить(ОписаниеМетода.ОпределениеОбъекта, Неопределено);
			КонецЕсли;
			
			Для Каждого КЗ Из ОписаниеМетода.Ответы Цикл
				
				ОписаниеОтвета = КЗ.Значение;
				
				// Обновить список используемых определений объектов
				Если ЗначениеЗаполнено(ОписаниеОтвета.ОпределениеОбъекта)
					И Не ТипЗнч(ОписаниеОтвета.ОпределениеОбъекта) = Тип("Строка") Тогда
					
					ОписаниеСервиса.ОпределенияОбъектов.Вставить(ОписаниеОтвета.ОпределениеОбъекта, Неопределено);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОписаниеСервиса.Ресурсы.Вставить(ДанныеРесурса.ИмяРесурса, ОписаниеРесурса);
		
	КонецЦикла;
	
	ДобавитьВОписаниеСервисаСлужебныеОтветы(ОписаниеСервиса);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеОпределенийОбъектов(ОписаниеСервиса, ПользовательскиеНастройки)
	
	Для Каждого КЗ Из ОписаниеСервиса.ОпределенияОбъектов Цикл
		
		ОпределениеОбъекта = КЗ.Ключ;
		
		ДанныеОпределенияОбъекта = ПользовательскиеНастройки.ОпределенияОбъектов.Найти(ОпределениеОбъекта, "Ссылка");
		
		ОписаниеОпределенияОбъекта = СформироватьОписаниеОпределенияОбъекта(ДанныеОпределенияОбъекта, ПользовательскиеНастройки);
		
		// Проверить на перечисление в свойстве
		Для Каждого КЗ Из ОписаниеОпределенияОбъекта.СвойстваОбъекта Цикл
			
			ОписаниеСвойстваОбъекта = КЗ.Значение;
			
			Если ОписаниеСвойстваОбъекта.ТипДанных = "Перечисление"
				И ОписаниеСервиса.ОпределенияОбъектов.Получить(ОписаниеСвойстваОбъекта.ОпределениеОбъекта) = Неопределено Тогда
				
				ДанныеОпределенияПеречисления = ПользовательскиеНастройки.ОпределенияОбъектов.Найти(ОписаниеСвойстваОбъекта.ОпределениеОбъекта, "Ссылка");
				
				ОписаниеОпределенияПеречисления = СформироватьОписаниеОпределенияОбъекта(ДанныеОпределенияПеречисления, ПользовательскиеНастройки);
				
				ОписаниеСервиса.ОпределенияОбъектов.Вставить(ОписаниеСвойстваОбъекта.ОпределениеОбъекта, ОписаниеОпределенияПеречисления);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОписаниеСервиса.ОпределенияОбъектов.Вставить(ОпределениеОбъекта, ОписаниеОпределенияОбъекта);
		
	КонецЦикла;
	
	// Заполнить описания служебных объектов
	ДобавитьВОписаниеСервисаСлужебныеОпределенияОбъектов(ОписаниеСервиса);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеСтруктурДанных

Функция СформироватьОписаниеРесурса(ДанныеРесурса, ПользовательскиеНастройки)
	
	Результат = СтруктураДанныхРесурс();
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеРесурса);
	
	// Заполнить описание параметров URL
	ПараметрыURL = ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, "ПараметрыURL", ДанныеРесурса.Ссылка);
	
	ПараметрыURLОтсортированные = ПользовательскиеНастройки.ПараметрыURL.Скопировать(ПараметрыURL);
	ПараметрыURLОтсортированные.Сортировать("ПорядковыйНомер Возр");
	
	Для Каждого ДанныеПараметраURL Из ПараметрыURLОтсортированные Цикл
		
		ОписаниеПараметраURL = СформироватьОписаниеПараметраЗапроса(ДанныеПараметраURL);
		
		Результат.ПараметрыURL.Вставить(ДанныеПараметраURL.ПорядковыйНомер, ОписаниеПараметраURL);
		
	КонецЦикла;
	
	// Заполнить описание методов ресурса
	Методы = ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, "Методы", ДанныеРесурса.Ссылка);
	
	Для Каждого ДанныеМетода Из Методы Цикл
		
		ОписаниеМетода = СформироватьОписаниеМетодаРесурса(ДанныеМетода, ПользовательскиеНастройки);
		
		Результат.Методы.Вставить(ДанныеМетода.МетодЗапроса, ОписаниеМетода);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОписаниеМетодаРесурса(ДанныеМетода, ПользовательскиеНастройки)
	
	Результат = СтруктураДанныхМетодЗапроса();
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеМетода);
	
	// Обновить наличие авторизации
	Если ДанныеМетода.ЕстьАвторизация Тогда
		
		// Заполнить разрешенных пользователей
		Доступы = ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, "Доступы", ДанныеМетода.Ссылка);
		
		Для Каждого ДанныеДоступа Из Доступы Цикл
			Результат.Доступ.Добавить(ДанныеДоступа.ИмяПользователя);
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнить описание заголовков запроса
	ЗаголовкиЗапроса = ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, "ЗаголовкиЗапроса", ДанныеМетода.Ссылка);
	
	Для Каждого ДанныеЗаголовкаЗапроса Из ЗаголовкиЗапроса Цикл
		
		ОписаниеПараметраЗапроса = СформироватьОписаниеПараметраЗапроса(ДанныеЗаголовкаЗапроса);
		
		Результат.Заголовки.Вставить(ДанныеЗаголовкаЗапроса.ИмяПараметра, ОписаниеПараметраЗапроса);
		
	КонецЦикла;
	
	// Заполнить описание параметров запроса
	ПараметрыЗапроса = ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, "ПараметрыЗапроса", ДанныеМетода.Ссылка);
	
	Для Каждого ДанныеПараметраЗапроса Из ПараметрыЗапроса Цикл
		
		ОписаниеПараметраЗапроса = СформироватьОписаниеПараметраЗапроса(ДанныеПараметраЗапроса);
		
		Результат.Параметры.Вставить(ДанныеПараметраЗапроса.ИмяПараметра, ОписаниеПараметраЗапроса);
		
	КонецЦикла;
	
	// Заполнить описание возвращаемых ответов метода
	Ответы = ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, "Ответы", ДанныеМетода.Ссылка);
	
	Для Каждого ДанныеОтвета Из Ответы Цикл
		
		ОписаниеОтвета = СформироватьОписаниеОтветаЗапроса(ДанныеОтвета, ПользовательскиеНастройки);
		
		Результат.Ответы.Вставить(ДанныеОтвета.ТипОтвета, ОписаниеОтвета);
		
	КонецЦикла;
	
	ДобавитьВОписаниеМетодаСлужебныеОтветы(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОписаниеГруппыРесурсов(ДанныеГруппыРесурсов)
	
	Результат = СтруктураДанныхГруппаРесурсов();
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеГруппыРесурсов);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОписаниеПараметраЗапроса(ДанныеПараметраЗапроса)
	
	Результат = СтруктураДанныхПараметрЗапроса();
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеПараметраЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОписаниеОтветаЗапроса(ДанныеОтвета, ПользовательскиеНастройки)
	
	Результат = СтруктураДанныхОтветЗапроса();
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеОтвета);
	
	Если ДанныеОтвета.ТипОтвета = Перечисления.ТипыОтветовREST.Успешно Тогда
		
		// Заполнить описание заголовков ответа
		ЗаголовкиОтвета = ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, "ЗаголовкиОтвета", ДанныеОтвета.Владелец);
		
		Для Каждого ДанныеЗаголовкаОтвета Из ЗаголовкиОтвета Цикл
			
			ОписаниеЗаголовкаОтвета = СформироватьОписаниеПараметраЗапроса(ДанныеЗаголовкаОтвета);
			
			Результат.Заголовки.Вставить(ДанныеЗаголовкаОтвета.ИмяПараметра, ОписаниеЗаголовкаОтвета);
			
		КонецЦикла;
		
	Иначе
		
		Результат.ТипДанных = "Объект";
		Результат.ОпределениеОбъекта = "DetailError";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОписаниеОпределенияОбъекта(ДанныеОпределенияОбъекта, ПользовательскиеНастройки)
	
	Результат = СтруктураДанныхОпределениеОбъекта();
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеОпределенияОбъекта);
	
	// Заполнить описание свойств объекта
	СвойстваОбъекта = ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, "СвойстваОбъектов", ДанныеОпределенияОбъекта.Ссылка);
	
	СвойстваОбъектаОтсортированные = ПользовательскиеНастройки.СвойстваОбъектов.Скопировать(СвойстваОбъекта);
	СвойстваОбъектаОтсортированные.Сортировать("НомерСтроки Возр");
	
	Для Каждого ДанныеСвойстваОбъекта Из СвойстваОбъектаОтсортированные Цикл
		
		ОписаниеСвойстваОбъекта = СтруктураДанныхСвойствоОбъекта();
		ЗаполнитьЗначенияСвойств(ОписаниеСвойстваОбъекта, ДанныеСвойстваОбъекта);
		
		Результат.ИменаСвойств.Добавить(ДанныеСвойстваОбъекта.ИмяСвойства);
		Результат.СвойстваОбъекта.Вставить(ДанныеСвойстваОбъекта.ИмяСвойства, ОписаниеСвойстваОбъекта);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодстановкаСлужебныхДанных

Процедура ДобавитьВОписаниеСервисаМетодДокументации(ОписаниеСервиса)
	
	ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
	ОписаниеОтвета.КодОтвета = 200;
	ОписаниеОтвета.ТипДанных = "Строка";
	
	ОписаниеМетода = СтруктураДанныхМетодЗапроса();
	ОписаниеМетода.МетодЗапроса = Перечисления.МетодыЗапросаREST.GET;
	ОписаниеМетода.Обработчик = "ОбработкаВызоваREST.ОбработчикМетодаДокументацииСервиса";
	ОписаниеМетода.Ответы.Вставить(Перечисления.ТипыОтветовREST.Успешно, ОписаниеОтвета);
	
	ОписаниеРесурса = СтруктураДанныхРесурс();
	ОписаниеРесурса.Методы.Вставить(Перечисления.МетодыЗапросаREST.GET, ОписаниеМетода);
	
	ОписаниеСервиса.Ресурсы.Вставить("/docs", ОписаниеРесурса);
	
КонецПроцедуры

Процедура ДобавитьВОписаниеСервисаМетодИконка16Документации(ОписаниеСервиса)
	
	ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
	ОписаниеОтвета.КодОтвета = 200;
	ОписаниеОтвета.ТипДанных = "ДвоичныеДанные";
	
	ОписаниеМетода = СтруктураДанныхМетодЗапроса();
	ОписаниеМетода.МетодЗапроса = Перечисления.МетодыЗапросаREST.GET;
	ОписаниеМетода.Обработчик = "ОбработкаВызоваREST.ОбработчикМетодаИконка16ДокументацииСервиса";
	ОписаниеМетода.Ответы.Вставить(Перечисления.ТипыОтветовREST.Успешно, ОписаниеОтвета);
	
	ОписаниеРесурса = СтруктураДанныхРесурс();
	ОписаниеРесурса.Методы.Вставить(Перечисления.МетодыЗапросаREST.GET, ОписаниеМетода);
	
	ОписаниеСервиса.Ресурсы.Вставить("/favicon-16x16.png", ОписаниеРесурса);
	
КонецПроцедуры

Процедура ДобавитьВОписаниеСервисаМетодИконка32Документации(ОписаниеСервиса)
	
	ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
	ОписаниеОтвета.КодОтвета = 200;
	ОписаниеОтвета.ТипДанных = "ДвоичныеДанные";
	
	ОписаниеМетода = СтруктураДанныхМетодЗапроса();
	ОписаниеМетода.МетодЗапроса = Перечисления.МетодыЗапросаREST.GET;
	ОписаниеМетода.Обработчик = "ОбработкаВызоваREST.ОбработчикМетодаИконка16ДокументацииСервиса";
	ОписаниеМетода.Ответы.Вставить(Перечисления.ТипыОтветовREST.Успешно, ОписаниеОтвета);
	
	ОписаниеРесурса = СтруктураДанныхРесурс();
	ОписаниеРесурса.Методы.Вставить(Перечисления.МетодыЗапросаREST.GET, ОписаниеМетода);
	
	ОписаниеСервиса.Ресурсы.Вставить("/favicon-32x32.png", ОписаниеРесурса);
	
КонецПроцедуры

Процедура ДобавитьВОписаниеСервисаМетодСтилейДокументации(ОписаниеСервиса)
	
	ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
	ОписаниеОтвета.КодОтвета = 200;
	ОписаниеОтвета.ТипДанных = "Строка";
	
	ОписаниеМетода = СтруктураДанныхМетодЗапроса();
	ОписаниеМетода.МетодЗапроса = Перечисления.МетодыЗапросаREST.GET;
	ОписаниеМетода.Обработчик = "ОбработкаВызоваREST.ОбработчикМетодаСтилейДокументацииСервиса";
	ОписаниеМетода.Ответы.Вставить(Перечисления.ТипыОтветовREST.Успешно, ОписаниеОтвета);
	
	ОписаниеРесурса = СтруктураДанныхРесурс();
	ОписаниеРесурса.Методы.Вставить(Перечисления.МетодыЗапросаREST.GET, ОписаниеМетода);
	
	ОписаниеСервиса.Ресурсы.Вставить("/swagger-ui.css", ОписаниеРесурса);
	
КонецПроцедуры

Процедура ДобавитьВОписаниеСервисаМетодСкриптовДокументации(ОписаниеСервиса)
	
	ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
	ОписаниеОтвета.КодОтвета = 200;
	ОписаниеОтвета.ТипДанных = "Строка";
	
	ОписаниеМетода = СтруктураДанныхМетодЗапроса();
	ОписаниеМетода.МетодЗапроса = Перечисления.МетодыЗапросаREST.GET;
	ОписаниеМетода.Обработчик = "ОбработкаВызоваREST.ОбработчикМетодаСкриптовДокументацииСервиса";
	ОписаниеМетода.Ответы.Вставить(Перечисления.ТипыОтветовREST.Успешно, ОписаниеОтвета);
	
	ОписаниеРесурса = СтруктураДанныхРесурс();
	ОписаниеРесурса.Методы.Вставить(Перечисления.МетодыЗапросаREST.GET, ОписаниеМетода);
	
	ОписаниеСервиса.Ресурсы.Вставить("/swagger-ui-bundle.js", ОписаниеРесурса);
	
КонецПроцедуры

Процедура ДобавитьВОписаниеСервисаМетодСпецификации(ОписаниеСервиса)
	
	ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
	ОписаниеОтвета.КодОтвета = 200;
	ОписаниеОтвета.ТипДанных = "Объект";
	
	ОписаниеМетода = СтруктураДанныхМетодЗапроса();
	ОписаниеМетода.МетодЗапроса = Перечисления.МетодыЗапросаREST.GET;
	ОписаниеМетода.Обработчик = "ОбработкаВызоваREST.ОбработчикМетодаСпецификацииСервиса";
	ОписаниеМетода.Ответы.Вставить(Перечисления.ТипыОтветовREST.Успешно, ОписаниеОтвета);
	
	ОписаниеРесурса = СтруктураДанныхРесурс();
	ОписаниеРесурса.Методы.Вставить(Перечисления.МетодыЗапросаREST.GET, ОписаниеМетода);
	
	ОписаниеСервиса.Ресурсы.Вставить("/openapi.json", ОписаниеРесурса);
	
КонецПроцедуры

Процедура ДобавитьВОписаниеСервисаСлужебныеОтветы(ОписаниеСервиса)
	
	// Ошибка авторизации
	Если ОписаниеСервиса.ЕстьАвторизация Тогда
		
		ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
		ОписаниеОтвета.КраткоеОписание = "Ошибка авторизации";
		ОписаниеОтвета.ТипДанных = "Объект";
		ОписаниеОтвета.ОпределениеОбъекта = "DetailError";
		
		ОписаниеСервиса.СтандартныеОтветы.Вставить("Unauthorized", ОписаниеОтвета);
		
	КонецЕсли;
	
	// Отклонение от спецификации
	ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
	ОписаниеОтвета.КраткоеОписание = "Отлонение от спецификации";
	ОписаниеОтвета.ТипДанных = "Объект";
	ОписаниеОтвета.ОпределениеОбъекта = "ValidationError";
	
	ОписаниеСервиса.СтандартныеОтветы.Вставить("ValidationError", ОписаниеОтвета);
	
	// Ошибка сервера
	ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
	ОписаниеОтвета.КраткоеОписание = "Ошибка сервера";
	ОписаниеОтвета.ТипДанных = "Объект";
	ОписаниеОтвета.ОпределениеОбъекта = "DetailError";
	
	ОписаниеСервиса.СтандартныеОтветы.Вставить("DetailError", ОписаниеОтвета);
	
КонецПроцедуры

Процедура ДобавитьВОписаниеСервисаСлужебныеОпределенияОбъектов(ОписаниеСервиса)
	
	// Отклонение от спецификации
	ОписаниеОпределенияОбъектаДетали = СтруктураДанныхОпределениеОбъекта();
	
	ОписаниеОпределенияОбъектаДетали.Ссылка = "ValidationErrorDetail";
	ОписаниеОпределенияОбъектаДетали.Наименование = "ValidationErrorDetail";
	ОписаниеОпределенияОбъектаДетали.КраткоеОписание = "Детали ошибки";
	
	//
	ОписаниеСвойстваОбъекта = СтруктураДанныхСвойствоОбъекта();
	ОписаниеСвойстваОбъекта.Владелец = "ValidationErrorDetail";
	ОписаниеСвойстваОбъекта.ИмяСвойства = "loc";
	ОписаниеСвойстваОбъекта.СистемноеИмя = "Локация";
	ОписаниеСвойстваОбъекта.КраткоеОписание = "Местонахождение ошибки";
	ОписаниеСвойстваОбъекта.ТипДанных = "Строка";
	
	ОписаниеОпределенияОбъектаДетали.ИменаСвойств.Добавить("Локация");
	ОписаниеОпределенияОбъектаДетали.СвойстваОбъекта.Вставить(ОписаниеСвойстваОбъекта.СистемноеИмя, ОписаниеСвойстваОбъекта);
	
	//
	ОписаниеСвойстваОбъекта = СтруктураДанныхСвойствоОбъекта();
	ОписаниеСвойстваОбъекта.Владелец = "ValidationErrorDetail";
	ОписаниеСвойстваОбъекта.ИмяСвойства = "msg";
	ОписаниеСвойстваОбъекта.СистемноеИмя = "Сообщение";
	ОписаниеСвойстваОбъекта.КраткоеОписание = "Текст ошибки";
	ОписаниеСвойстваОбъекта.ТипДанных = "Строка";
	
	ОписаниеОпределенияОбъектаДетали.ИменаСвойств.Добавить("Сообщение");
	ОписаниеОпределенияОбъектаДетали.СвойстваОбъекта.Вставить(ОписаниеСвойстваОбъекта.СистемноеИмя, ОписаниеСвойстваОбъекта);
	
	ОписаниеСервиса.ОпределенияОбъектов.Вставить("ValidationErrorDetail", ОписаниеОпределенияОбъектаДетали);
	
	//
	ОписаниеОпределенияОбъекта = СтруктураДанныхОпределениеОбъекта();
	
	ОписаниеОпределенияОбъекта.Ссылка = "ValidationError";
	ОписаниеОпределенияОбъекта.Наименование = "ValidationError";
	ОписаниеОпределенияОбъекта.КраткоеОписание = "Ошибка спецификации";
	
	ОписаниеСвойстваОбъекта = СтруктураДанныхСвойствоОбъекта();
	ОписаниеСвойстваОбъекта.Владелец = "ValidationError";
	ОписаниеСвойстваОбъекта.ИмяСвойства = "detail";
	ОписаниеСвойстваОбъекта.СистемноеИмя = "Описание";
	ОписаниеСвойстваОбъекта.КраткоеОписание = "Детали ошибки";
	ОписаниеСвойстваОбъекта.ТипДанных = "Массив";
	ОписаниеСвойстваОбъекта.ОпределениеОбъекта = "ValidationErrorDetail";
	
	ОписаниеОпределенияОбъекта.ИменаСвойств.Добавить("Описание");
	ОписаниеОпределенияОбъекта.СвойстваОбъекта.Вставить(ОписаниеСвойстваОбъекта.СистемноеИмя, ОписаниеСвойстваОбъекта);
	
	ОписаниеСервиса.ОпределенияОбъектов.Вставить("ValidationError", ОписаниеОпределенияОбъекта);
	
	// Ошибка сервера
	ОписаниеОпределенияОбъекта = СтруктураДанныхОпределениеОбъекта();
	
	ОписаниеОпределенияОбъекта.Ссылка = "DetailError";
	ОписаниеОпределенияОбъекта.Наименование = "DetailError";
	ОписаниеОпределенияОбъекта.КраткоеОписание = "Общая ошибка";
	
	ОписаниеСвойстваОбъекта = СтруктураДанныхСвойствоОбъекта();
	ОписаниеСвойстваОбъекта.Владелец = "DetailError";
	ОписаниеСвойстваОбъекта.ИмяСвойства = "detail";
	ОписаниеСвойстваОбъекта.СистемноеИмя = "Описание";
	ОписаниеСвойстваОбъекта.КраткоеОписание = "Текст ошибки";
	ОписаниеСвойстваОбъекта.ТипДанных = "Строка";
	
	ОписаниеОпределенияОбъекта.ИменаСвойств.Добавить("Описание");
	ОписаниеОпределенияОбъекта.СвойстваОбъекта.Вставить(ОписаниеСвойстваОбъекта.СистемноеИмя, ОписаниеСвойстваОбъекта);
	
	ОписаниеСервиса.ОпределенияОбъектов.Вставить("DetailError", ОписаниеОпределенияОбъекта);
	
КонецПроцедуры

Процедура ДобавитьВОписаниеМетодаСлужебныеОтветы(ОписаниеМетода)
	
	// Ошибка авторизации
	Если ОписаниеМетода.ЕстьАвторизация Тогда
		
		ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
		ОписаниеОтвета.КодОтвета = 401;
		ОписаниеОтвета.СтандартныйОтвет = "Unauthorized";
		
		ОписаниеМетода.Ответы.Вставить(Перечисления.ТипыОтветовREST.ОшибкаНеАвторизован, ОписаниеОтвета);
		
	КонецЕсли;
	
	// Отклонение от спецификации
	ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
	ОписаниеОтвета.КодОтвета = 422;
	ОписаниеОтвета.СтандартныйОтвет = "ValidationError";
	
	ОписаниеМетода.Ответы.Вставить(Перечисления.ТипыОтветовREST.ОшибкаСпецификации, ОписаниеОтвета);
	
	// Ошибка сервера
	ОписаниеОтвета = СтруктураДанныхОтветЗапроса();
	ОписаниеОтвета.КодОтвета = 500;
	ОписаниеОтвета.СтандартныйОтвет = "DetailError";
	
	ОписаниеМетода.Ответы.Вставить(Перечисления.ТипыОтветовREST.ВнутренняяОшибка, ОписаниеОтвета);
	
КонецПроцедуры

#КонецОбласти

#Область ПредопределенныеСтруктурыДанных

Функция СтруктураДанныхСервис()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("СистемноеИмя", "");
	Результат.Вставить("КорневойURL", "");
	Результат.Вставить("Версия", 1);
	Результат.Вставить("КраткоеОписание", "");
	Результат.Вставить("ЕстьАвторизация", Ложь);
	Результат.Вставить("ГруппыРесурсов", Новый Массив);
	Результат.Вставить("Ресурсы", Новый Соответствие);
	Результат.Вставить("СтандартныеОтветы", Новый Соответствие);
	Результат.Вставить("ОпределенияОбъектов", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхГруппаРесурсов()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Владелец", Неопределено);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Имя", "");
	Результат.Вставить("КраткоеОписание", "");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхРесурс()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Владелец", Неопределено);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("ИмяРесурса", "");
	Результат.Вставить("ИмяГруппы", "");
	Результат.Вставить("ЕстьПараметрыURL", Ложь);
	Результат.Вставить("ПараметрыURL", Новый Соответствие);
	Результат.Вставить("Методы", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхМетодЗапроса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Владелец", Неопределено);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("МетодЗапроса", "");
	Результат.Вставить("Обработчик", "");
	Результат.Вставить("КраткоеОписание", "");
	Результат.Вставить("ЕстьАвторизация", Ложь);
	Результат.Вставить("Доступ", Новый Массив);
	Результат.Вставить("ТипДанных", "Пусто");
	Результат.Вставить("ОпределениеОбъекта", Неопределено);
	Результат.Вставить("Заголовки", Новый Соответствие);
	Результат.Вставить("Параметры", Новый Соответствие);
	Результат.Вставить("Ответы", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхПараметрЗапроса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Владелец", Неопределено);
	Результат.Вставить("ПорядковыйНомер", 0);
	Результат.Вставить("ИмяПараметра", "");
	Результат.Вставить("Обязательный", Ложь);
	Результат.Вставить("КраткоеОписание", "");
	Результат.Вставить("ТипДанных", "");
	Результат.Вставить("ОпределениеОбъекта", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхОтветЗапроса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Владелец", Неопределено);
	Результат.Вставить("КодОтвета", 0);
	Результат.Вставить("СтандартныйОтвет", "");
	Результат.Вставить("КраткоеОписание", "");
	Результат.Вставить("ТипДанных", "");
	Результат.Вставить("ОпределениеОбъекта", Неопределено);
	Результат.Вставить("Заголовки", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхОпределениеОбъекта()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Наименование", "");
	Результат.Вставить("КраткоеОписание", "");
	Результат.Вставить("Тип", Перечисления.ТипыСтруктурДанныхREST.ПустаяСсылка());
	Результат.Вставить("ИменаСвойств", Новый Массив);
	Результат.Вставить("СвойстваОбъекта", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхСвойствоОбъекта()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Владелец", Неопределено);
	Результат.Вставить("СистемноеИмя", "");
	Результат.Вставить("ИмяСвойства", "");
	Результат.Вставить("КраткоеОписание", "");
	Результат.Вставить("ТипДанных", "");
	Результат.Вставить("ОпределениеОбъекта", Неопределено);
	Результат.Вставить("ЗначениеПеречисления", Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолучитьДанныеПоВладельцу(ПользовательскиеНастройки, Таблица, Владелец)
	
	ПараметрыОтбора = Новый Структура("Владелец", Владелец);
	
	Возврат ПользовательскиеНастройки[Таблица].НайтиСтроки(ПараметрыОтбора);
	
КонецФункции

#КонецОбласти

#КонецОбласти

